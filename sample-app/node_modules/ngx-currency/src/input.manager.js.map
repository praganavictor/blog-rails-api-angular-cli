{"version":3,"sources":["../../src/input.manager.ts"],"names":[],"mappings":"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","file":"input.manager.js","sourceRoot":"","sourcesContent":["export class InputManager {\n\n  private _storedRawValue: string;\n\n  constructor(private htmlInputElement: any) {\n  }\n\n  setCursorAt(position: number): void {\n    if (this.htmlInputElement.setSelectionRange) {\n      this.htmlInputElement.focus();\n      this.htmlInputElement.setSelectionRange(position, position);\n    } else if (this.htmlInputElement.createTextRange) {\n      let textRange = this.htmlInputElement.createTextRange();\n      textRange.collapse(true);\n      textRange.moveEnd(\"character\", position);\n      textRange.moveStart(\"character\", position);\n      textRange.select();\n    }\n  }\n\n  updateValueAndCursor(newRawValue: string, oldLength: number, selectionStart: number): void {\n    this.rawValue = newRawValue;\n    let newLength = newRawValue.length;\n    selectionStart = selectionStart - (oldLength - newLength);\n    this.setCursorAt(selectionStart);\n  }\n\n  get canInputMoreNumbers(): boolean {\n    let haventReachedMaxLength = !(this.rawValue.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n    let selectionStart = this.inputSelection.selectionStart;\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let haveNumberSelected = (selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/\\d/)) ? true : false;\n    let startWithZero = (this.htmlInputElement.value.substring(0, 1) == \"0\");\n    return haventReachedMaxLength || haveNumberSelected || startWithZero;\n  }\n\n  get inputSelection(): any {\n    let selectionStart = 0;\n    let selectionEnd = 0;\n\n    if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n      selectionStart = this.htmlInputElement.selectionStart;\n      selectionEnd = this.htmlInputElement.selectionEnd;\n    } else {\n      let range = (<any>document).selection.createRange();\n\n      if (range && range.parentElement() == this.htmlInputElement) {\n        let lenght = this.htmlInputElement.value.length;\n        let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n        let startRange = this.htmlInputElement.createTextRange();\n        startRange.moveToBookmark(range.getBookmark());\n        let endRange = this.htmlInputElement.createTextRange();\n        endRange.collapse(false);\n\n        if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n          selectionStart = selectionEnd = lenght;\n        } else {\n          selectionStart = -startRange.moveStart(\"character\", -lenght);\n          selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n\n          if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n            selectionEnd = lenght;\n          } else {\n            selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n            selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n          }\n        }\n      }\n    }\n\n    return {\n      selectionStart: selectionStart,\n      selectionEnd: selectionEnd\n    };\n  }\n\n  get rawValue(): string {\n    return this.htmlInputElement && this.htmlInputElement.value;\n  }\n\n  set rawValue(value: string) {\n    this._storedRawValue = value;\n\n    if (this.htmlInputElement) {\n      this.htmlInputElement.value = value;\n    }\n  }\n\n  get storedRawValue(): string {\n    return this._storedRawValue;\n  }\n}\n"]}