{"version":3,"file":"ngx-select-ex.umd.min.js","sources":["~/ngx-select-ex/src/app/lib/ngx-select/ngx-select.classes.ts","~/ngx-select-ex/src/app/lib/ngx-select/ngx-templates.directive.ts","~/ngx-select-ex/src/app/lib/ngx-select/ngx-select.component.ts","~/ngx-select-ex/src/app/lib/ngx-select/ngx-select.module.ts"],"sourcesContent":["import {DomSanitizer, SafeHtml} from '@angular/platform-browser';\nimport * as escapeStringNs from 'escape-string-regexp';\nimport {INgxSelectOptGroup, INgxSelectOption, INgxSelectOptionBase, TNgxSelectOptionType} from './ngx-select.interfaces';\n\nconst /** @type {?} */ escapeString = escapeStringNs;\nexport class NgxSelectOption implements INgxSelectOption, INgxSelectOptionBase {\n    readonly type: TNgxSelectOptionType = 'option';\n/**\n * @param {?} value\n * @param {?} text\n * @param {?} disabled\n * @param {?} data\n * @param {?=} _parent\n */\nconstructor(public value: number | string,\npublic text: string,\npublic disabled: boolean,\npublic data: any,\nprivate _parent: NgxSelectOptGroup = null) {\n    }\n/**\n * @return {?}\n */\npublic get parent(): NgxSelectOptGroup {\n        return this._parent;\n    }\nprivate cacheHighlightText: string;\nprivate cacheRenderedText: SafeHtml = null;\n/**\n * @param {?} sanitizer\n * @param {?} highlightText\n * @return {?}\n */\npublic renderText(sanitizer: DomSanitizer, highlightText: string): SafeHtml {\n        if (this.cacheHighlightText !== highlightText || this.cacheRenderedText === null) {\n            this.cacheHighlightText = highlightText;\n            if (this.cacheHighlightText) {\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml((this.text + '').replace(\n                    new RegExp(escapeString(this.cacheHighlightText), 'gi'), '<strong>$&</strong>'\n                ));\n            } else {\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml(this.text);\n            }\n        }\n        return this.cacheRenderedText;\n    }\n}\n\nfunction NgxSelectOption_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxSelectOption.prototype.type;\n/** @type {?} */\nNgxSelectOption.prototype.cacheHighlightText;\n/** @type {?} */\nNgxSelectOption.prototype.cacheRenderedText;\n/** @type {?} */\nNgxSelectOption.prototype.value;\n/** @type {?} */\nNgxSelectOption.prototype.text;\n/** @type {?} */\nNgxSelectOption.prototype.disabled;\n/** @type {?} */\nNgxSelectOption.prototype.data;\n/** @type {?} */\nNgxSelectOption.prototype._parent;\n}\n\nexport class NgxSelectOptGroup implements INgxSelectOptGroup, INgxSelectOptionBase {\n    readonly type: TNgxSelectOptionType = 'optgroup';\npublic optionsFiltered: NgxSelectOption[];\n/**\n * @param {?} label\n * @param {?=} options\n */\nconstructor(public label: string,\npublic options: NgxSelectOption[] = []) {\n        this.filter(() => true);\n    }\n/**\n * @param {?} callbackFn\n * @return {?}\n */\npublic filter(callbackFn: (value: NgxSelectOption) => any): void {\n        this.optionsFiltered = this.options.filter((option: NgxSelectOption) => callbackFn(option));\n    }\n}\n\nfunction NgxSelectOptGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxSelectOptGroup.prototype.type;\n/** @type {?} */\nNgxSelectOptGroup.prototype.optionsFiltered;\n/** @type {?} */\nNgxSelectOptGroup.prototype.label;\n/** @type {?} */\nNgxSelectOptGroup.prototype.options;\n}\n\n\nexport type TSelectOption = NgxSelectOptGroup | NgxSelectOption;\n","import {Directive, TemplateRef} from '@angular/core';\nexport class NgxSelectOptionDirective {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) {\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngx-select-option]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction NgxSelectOptionDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxSelectOptionDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxSelectOptionDirective.ctorParameters;\n/** @type {?} */\nNgxSelectOptionDirective.prototype.template;\n}\n\nexport class NgxSelectOptionSelectedDirective {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) {\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngx-select-option-selected]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction NgxSelectOptionSelectedDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxSelectOptionSelectedDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxSelectOptionSelectedDirective.ctorParameters;\n/** @type {?} */\nNgxSelectOptionSelectedDirective.prototype.template;\n}\n\nexport class NgxSelectOptionNotFoundDirective {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) {\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngx-select-option-not-found]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction NgxSelectOptionNotFoundDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxSelectOptionNotFoundDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxSelectOptionNotFoundDirective.ctorParameters;\n/** @type {?} */\nNgxSelectOptionNotFoundDirective.prototype.template;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    AfterContentChecked, DoCheck, Input, Output, ViewChild,\n    Component, ElementRef, EventEmitter, forwardRef, HostListener, IterableDiffer, IterableDiffers, ChangeDetectorRef, ContentChild,\n    TemplateRef, Optional, Inject, InjectionToken\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/observable/from';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/distinctUntilChanged';\nimport'rxjs/add/operator/combineLatest';\nimport'rxjs/add/operator/mergeMap';\nimport'rxjs/add/operator/toArray';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/share';\nimport'rxjs/add/operator/merge';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/do';\nimport * as lodashNs from 'lodash';\nimport * as escapeStringNs from 'escape-string-regexp';\nimport {NgxSelectOptGroup, NgxSelectOption, TSelectOption} from './ngx-select.classes';\nimport {NgxSelectOptionDirective, NgxSelectOptionNotFoundDirective, NgxSelectOptionSelectedDirective} from './ngx-templates.directive';\nimport {INgxOptionNavigated, INgxSelectOption, INgxSelectOptions} from './ngx-select.interfaces';\n\nconst /** @type {?} */ _ = lodashNs;\nconst /** @type {?} */ escapeString = escapeStringNs;\n\nexport const /** @type {?} */ NGX_SELECT_OPTIONS = new InjectionToken<any>('NGX_SELECT_OPTIONS');\n\nexport interface INgxSelectComponentMouseEvent extends MouseEvent {\n    clickedSelectComponent?: NgxSelectComponent;\n}\ntype ENavigation = number;\nlet ENavigation: any = {};\nENavigation.first = 0;\nENavigation.previous = 1;\nENavigation.next = 2;\nENavigation.last = 3;\nENavigation[ENavigation.first] = \"first\";\nENavigation[ENavigation.previous] = \"previous\";\nENavigation[ENavigation.next] = \"next\";\nENavigation[ENavigation.last] = \"last\";\n\n/**\n * @param {?} obj\n * @param {?} propertyName\n * @return {?}\n */\nfunction propertyExists(obj: Object, propertyName: string) {\n    return propertyName in obj;\n}\nexport class NgxSelectComponent implements INgxSelectOptions, ControlValueAccessor, DoCheck, AfterContentChecked {\npublic items: any[];\npublic optionValueField = 'id';\npublic optionTextField = 'text';\npublic optGroupLabelField = 'label';\npublic optGroupOptionsField = 'options';\npublic multiple = false;\npublic allowClear = false;\npublic placeholder = '';\npublic noAutoComplete = false;\npublic disabled = false;\npublic defaultValue: any[] = [];\npublic autoSelectSingleOption = false;\npublic autoClearSearch = false;\npublic noResultsFound = 'No results found';\npublic size: 'small' | 'default' | 'large' = 'default';\npublic searchCallback: (search: string, item: INgxSelectOption) => boolean;\npublic keyCodeToRemoveSelected = 'Delete';\npublic keyCodeToOptionsOpen = 'Enter';\npublic keyCodeToOptionsClose = 'Escape';\npublic keyCodeToOptionsSelect = 'Enter';\npublic keyCodeToNavigateFirst = 'ArrowLeft';\npublic keyCodeToNavigatePrevious = 'ArrowUp';\npublic keyCodeToNavigateNext = 'ArrowDown';\npublic keyCodeToNavigateLast = 'ArrowRight';\npublic typed = new EventEmitter<string>();\npublic focus = new EventEmitter<void>();\npublic blur = new EventEmitter<void>();\npublic open = new EventEmitter<void>();\npublic close = new EventEmitter<void>();\npublic select = new EventEmitter<any>();\npublic remove = new EventEmitter<any>();\npublic navigated = new EventEmitter<INgxOptionNavigated>();\n\n     protected mainElRef: ElementRef;\n     protected inputElRef: ElementRef;\n     protected choiceMenuElRef: ElementRef;\n\n     templateOption: NgxSelectOptionDirective;\n     templateSelectedOption: NgxSelectOptionSelectedDirective;\n     templateOptionNotFound: NgxSelectOptionNotFoundDirective;\npublic optionsOpened = false;\npublic optionsFiltered: TSelectOption[];\nprivate optionActive: NgxSelectOption;\nprivate itemsDiffer: IterableDiffer<any>;\nprivate defaultValueDiffer: IterableDiffer<any[]>;\nprivate actualValue: any[] = [];\npublic subjOptions = new BehaviorSubject<TSelectOption[]>([]);\nprivate subjSearchText = new BehaviorSubject<string>('');\nprivate subjOptionsSelected = new BehaviorSubject<NgxSelectOption[]>([]);\nprivate subjExternalValue = new BehaviorSubject<any[]>([]);\nprivate subjDefaultValue = new BehaviorSubject<any[]>([]);\nprivate subjRegisterOnChange = new Subject();\nprivate cacheOptionsFilteredFlat: NgxSelectOption[];\nprivate cacheElementOffsetTop: number;\nprivate _focusToInput = false;\npublic isFocused = false;\n/**\n * @param {?} iterableDiffers\n * @param {?} sanitizer\n * @param {?} cd\n * @param {?} defaultOptions\n */\nconstructor(iterableDiffers: IterableDiffers,\nprivate sanitizer: DomSanitizer,\nprivate cd: ChangeDetectorRef,\n                  defaultOptions: INgxSelectOptions) {\n        Object.assign(this, defaultOptions);\n\n        // differs\n        this.itemsDiffer = iterableDiffers.find([]).create<any>(null);\n        this.defaultValueDiffer = iterableDiffers.find([]).create<any>(null);\n\n        // observers\n        this.typed.subscribe((text: string) => this.subjSearchText.next(text));\n        let cacheExternalValue: any[];\n        const subjActualValue = this.subjExternalValue\n            .map((v: any[]) => cacheExternalValue = v === null ? [] : [].concat(v))\n            .merge(this.subjOptionsSelected.map((options: NgxSelectOption[]) =>\n                options.map((o: NgxSelectOption) => o.value)\n            ))\n            .combineLatest(this.subjDefaultValue, (eVal: any[], dVal: any[]) => {\n                const newVal = _.isEqual(eVal, dVal) ? [] : eVal;\n                return newVal.length ? newVal : dVal;\n            })\n            .distinctUntilChanged((x, y) => _.isEqual(x, y))\n            .share();\n\n        subjActualValue\n            .combineLatest(this.subjRegisterOnChange, (actualValue: any[]) => actualValue)\n            .subscribe((actualValue: any[]) => {\n                this.actualValue = actualValue;\n                if (!_.isEqual(actualValue, cacheExternalValue)) {\n                    cacheExternalValue = actualValue;\n                    if (this.multiple) {\n                        this.onChange(actualValue);\n                    } else {\n                        this.onChange(actualValue.length ? actualValue[0] : null);\n                    }\n                }\n            });\n\n        this.subjOptions\n            .flatMap((options: TSelectOption[]) => Observable\n                .from(options)\n                .flatMap((option: TSelectOption) => option instanceof NgxSelectOption\n                    ? Observable.of(option)\n                    : (option instanceof NgxSelectOptGroup ? Observable.from(option.options) : Observable.empty())\n                )\n                .toArray()\n            )\n            .combineLatest(subjActualValue, (optionsFlat: NgxSelectOption[], actualValue: any[]) => {\n                Observable.from(optionsFlat)\n                    .filter((option: NgxSelectOption) => actualValue.indexOf(option.value) !== -1)\n                    .toArray()\n                    .filter((options: NgxSelectOption[]) => !_.isEqual(options, this.subjOptionsSelected.value))\n                    .subscribe((options: NgxSelectOption[]) => this.subjOptionsSelected.next(options));\n            })\n            .subscribe();\n\n        this.subjOptions\n            .combineLatest(this.subjOptionsSelected, this.subjSearchText,\n                (options: TSelectOption[], selectedOptions: NgxSelectOption[], search: string) => {\n                    this.optionsFiltered = this.filterOptions(search, options, selectedOptions);\n                    this.cacheOptionsFilteredFlat = null;\n\n                    this.optionsFilteredFlat()\n                        .filter((flatOptions: NgxSelectOption[]) =>\n                            this.autoSelectSingleOption && flatOptions.length === 1 && !selectedOptions.length\n                        )\n                        .subscribe((flatOptions: NgxSelectOption[]) => this.subjOptionsSelected.next(flatOptions));\n                }\n            )\n            .subscribe();\n    }\n/**\n * @param {?=} otherClassNames\n * @param {?=} useFormControl\n * @return {?}\n */\npublic setFormControlSize(otherClassNames: Object = {}, useFormControl: boolean = true) {\n        const /** @type {?} */ formControlExtraClasses = useFormControl ? {\n            'form-control-sm input-sm': this.size === 'small',\n            'form-control-lg input-lg': this.size === 'large'\n        } : {};\n        return Object.assign(formControlExtraClasses, otherClassNames);\n    }\n/**\n * @return {?}\n */\npublic setBtnSize() {\n        return {'btn-sm': this.size === 'small', 'btn-lg': this.size === 'large'};\n    }\n/**\n * @return {?}\n */\npublic get optionsSelected(): NgxSelectOption[] {\n        return this.subjOptionsSelected.value;\n    }\n/**\n * @param {?} event\n * @return {?}\n */\npublic mainClicked(event: INgxSelectComponentMouseEvent) {\n        event.clickedSelectComponent = this;\n        if (!this.isFocused) {\n            this.isFocused = true;\n            this.focus.emit();\n        }\n    }\n/**\n * @param {?} event\n * @return {?}\n */\npublic documentClick(event: INgxSelectComponentMouseEvent) {\n        if (event.clickedSelectComponent !== this) {\n            if (this.optionsOpened) {\n                this.optionsClose();\n                this.cd.detectChanges(); // fix error because of delay between different events\n            }\n            if (this.isFocused) {\n                this.isFocused = false;\n                this.blur.emit();\n            }\n        }\n    }\n/**\n * @return {?}\n */\nprivate optionsFilteredFlat(): Observable<NgxSelectOption[]> {\n        if (this.cacheOptionsFilteredFlat) {\n            return Observable.of(this.cacheOptionsFilteredFlat);\n        }\n\n        return Observable.from(this.optionsFiltered)\n            .flatMap<TSelectOption, NgxSelectOption>((option: TSelectOption) =>\n                option instanceof NgxSelectOption ? Observable.of(option) :\n                    (option instanceof NgxSelectOptGroup ? Observable.from(option.optionsFiltered) : Observable.empty())\n            )\n            .filter((optionsFilteredFlat: NgxSelectOption) => !optionsFilteredFlat.disabled)\n            .toArray()\n            .do((optionsFilteredFlat: NgxSelectOption[]) => this.cacheOptionsFilteredFlat = optionsFilteredFlat);\n    }\n/**\n * @param {?} navigation\n * @return {?}\n */\nprivate navigateOption(navigation: ENavigation) {\n        this.optionsFilteredFlat()\n            .map<NgxSelectOption[], INgxOptionNavigated>((options: NgxSelectOption[]) => {\n                const /** @type {?} */ navigated: INgxOptionNavigated = {index: -1, activeOption: null, filteredOptionList: options};\n                let /** @type {?} */ newActiveIdx;\n                switch (navigation) {\n                    case ENavigation.first:\n                        navigated.index = 0;\n                        break;\n                    case ENavigation.previous:\n                        newActiveIdx = options.indexOf(this.optionActive) - 1;\n                        navigated.index = newActiveIdx >= 0 ? newActiveIdx : options.length - 1;\n                        break;\n                    case ENavigation.next:\n                        newActiveIdx = options.indexOf(this.optionActive) + 1;\n                        navigated.index = newActiveIdx < options.length ? newActiveIdx : 0;\n                        break;\n                    case ENavigation.last:\n                        navigated.index = options.length - 1;\n                        break;\n                }\n                navigated.activeOption = options[navigated.index];\n                return navigated;\n            })\n            .subscribe((newNavigated: INgxOptionNavigated) => this.optionActivate(newNavigated));\n    }\n/**\n * @return {?}\n */\npublic ngDoCheck(): void {\n        if (this.itemsDiffer.diff(this.items)) {\n            this.subjOptions.next(this.buildOptions(this.items));\n        }\n\n        const /** @type {?} */ defVal = this.defaultValue ? [].concat(this.defaultValue) : [];\n        if (this.defaultValueDiffer.diff(defVal)) {\n            this.subjDefaultValue.next(defVal);\n        }\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        if (this._focusToInput && this.checkInputVisibility() && this.inputElRef &&\n            this.inputElRef.nativeElement !== document.activeElement) {\n            this._focusToInput = false;\n            this.inputElRef.nativeElement.focus();\n        }\n    }\n/**\n * @return {?}\n */\npublic canClearNotMultiple(): boolean {\n        return this.allowClear && !!this.subjOptionsSelected.value.length &&\n            (!this.subjDefaultValue.value.length || this.subjDefaultValue.value[0] !== this.actualValue[0]);\n    }\n/**\n * @return {?}\n */\npublic focusToInput(): void {\n        this._focusToInput = true;\n    }\n/**\n * @param {?} event\n * @return {?}\n */\npublic inputKeyDown(event: KeyboardEvent) {\n        const /** @type {?} */ keysForOpenedState = [\n            this.keyCodeToOptionsSelect,\n            this.keyCodeToNavigateFirst,\n            this.keyCodeToNavigatePrevious,\n            this.keyCodeToNavigateNext,\n            this.keyCodeToNavigateLast,\n        ];\n        const /** @type {?} */ keysForClosedState = [this.keyCodeToOptionsOpen, this.keyCodeToRemoveSelected];\n\n        if (this.optionsOpened && keysForOpenedState.indexOf(event.code) !== -1) {\n            event.preventDefault();\n            event.stopPropagation();\n            switch (event.code) {\n                case this.keyCodeToOptionsSelect:\n                    this.optionSelect(this.optionActive);\n                    this.navigateOption(ENavigation.next);\n                    break;\n                case this.keyCodeToNavigateFirst:\n                    this.navigateOption(ENavigation.first);\n                    break;\n                case this.keyCodeToNavigatePrevious:\n                    this.navigateOption(ENavigation.previous);\n                    break;\n                case this.keyCodeToNavigateLast:\n                    this.navigateOption(ENavigation.last);\n                    break;\n                case this.keyCodeToNavigateNext:\n                    this.navigateOption(ENavigation.next);\n                    break;\n            }\n        } else if (!this.optionsOpened && keysForClosedState.indexOf(event.code) !== -1) {\n            event.preventDefault();\n            event.stopPropagation();\n            switch (event.code) {\n                case this.keyCodeToOptionsOpen:\n                    this.optionsOpen();\n                    break;\n                case this.keyCodeToRemoveSelected:\n                    this.optionRemove(this.subjOptionsSelected.value[this.subjOptionsSelected.value.length - 1], event);\n                    break;\n            }\n        }\n    }\n/**\n * @param {?} event\n * @return {?}\n */\npublic mainKeyUp(event: KeyboardEvent): void {\n        if (event.code === this.keyCodeToOptionsClose) {\n            this.optionsClose(true);\n        }\n    }\n/**\n * @param {?} index\n * @param {?} option\n * @return {?}\n */\npublic trackByOption(index: number, option: TSelectOption) {\n        return option instanceof NgxSelectOption ? option.value :\n            (option instanceof NgxSelectOptGroup ? option.label : option);\n    }\n/**\n * @return {?}\n */\npublic checkInputVisibility(): boolean {\n        return (this.multiple === true) || (this.optionsOpened && !this.noAutoComplete);\n    }\n/**\n * @param {?=} value\n * @return {?}\n */\nprotected inputKeyUp(value: string = '') {\n        if (!this.optionsOpened && value) {\n            this.optionsOpen(value);\n        }\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nprotected doInputText(value: string) {\n        if (this.optionsOpened) {\n            this.typed.emit(value);\n        }\n    }\n/**\n * @param {?=} value\n * @return {?}\n */\nprotected inputClick(value: string = '') {\n        if (!this.optionsOpened) {\n            this.optionsOpen(value);\n        }\n    }\n/**\n * @param {?} html\n * @return {?}\n */\nprotected sanitize(html: string): SafeHtml {\n        return html ? this.sanitizer.bypassSecurityTrustHtml(html) : null;\n    }\n/**\n * @param {?} option\n * @return {?}\n */\nprotected highlightOption(option: NgxSelectOption): SafeHtml {\n        if (this.inputElRef) {\n            return option.renderText(this.sanitizer, this.inputElRef.nativeElement.value);\n        }\n        return option.renderText(this.sanitizer, '');\n    }\n/**\n * @param {?} option\n * @param {?=} event\n * @return {?}\n */\nprotected optionSelect(option: NgxSelectOption, event: Event = null): void {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        if (option && !option.disabled) {\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).concat([option]));\n            this.select.emit(option.value);\n            this.optionsClose(true);\n            this.onTouched();\n        }\n    }\n/**\n * @param {?} option\n * @param {?} event\n * @return {?}\n */\nprotected optionRemove(option: NgxSelectOption, event: Event): void {\n        if (!this.disabled && option) {\n            event.stopPropagation();\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).filter(o => o !== option));\n            this.remove.emit(option.value);\n        }\n    }\n/**\n * @param {?} option\n * @param {?} element\n * @return {?}\n */\nprotected isOptionActive(option: NgxSelectOption, element: HTMLElement) {\n        if (this.optionActive === option) {\n            this.ensureVisibleElement(element);\n            return true;\n        }\n        return false;\n    }\n/**\n * @param {?} navigated\n * @return {?}\n */\nprotected optionActivate(navigated: INgxOptionNavigated): void {\n        if (!navigated.activeOption || !navigated.activeOption.disabled) {\n            this.optionActive = navigated.activeOption;\n            this.navigated.emit(navigated);\n        }\n    }\n/**\n * @param {?} search\n * @param {?} options\n * @param {?} selectedOptions\n * @return {?}\n */\nprivate filterOptions(search: string, options: TSelectOption[], selectedOptions: NgxSelectOption[]): TSelectOption[] {\n        const /** @type {?} */ regExp = new RegExp(escapeString(search), 'i'), /** @type {?} */\n            filterOption = (option: NgxSelectOption) => {\n                if (this.searchCallback) {\n                    return this.searchCallback(search, option);\n                }\n                return (!search || regExp.test(option.text)) && (!this.multiple || selectedOptions.indexOf(option) === -1);\n            };\n\n        return options.filter((option: TSelectOption) => {\n            if (option instanceof NgxSelectOption) {\n                return filterOption( /** @type {?} */((<NgxSelectOption>option)));\n            } else if (option instanceof NgxSelectOptGroup) {\n                const /** @type {?} */ subOp = /** @type {?} */(( <NgxSelectOptGroup>option));\n                subOp.filter((subOption: NgxSelectOption) => filterOption(subOption));\n                return subOp.optionsFiltered.length;\n            }\n        });\n    }\n/**\n * @param {?} element\n * @return {?}\n */\nprivate ensureVisibleElement(element: HTMLElement) {\n        if (this.choiceMenuElRef && this.cacheElementOffsetTop !== element.offsetTop) {\n            this.cacheElementOffsetTop = element.offsetTop;\n            const /** @type {?} */ container: HTMLElement = this.choiceMenuElRef.nativeElement;\n            if (this.cacheElementOffsetTop < container.scrollTop) {\n                container.scrollTop = this.cacheElementOffsetTop;\n            } else if (this.cacheElementOffsetTop + element.offsetHeight > container.scrollTop + container.clientHeight) {\n                container.scrollTop = this.cacheElementOffsetTop + element.offsetHeight - container.clientHeight;\n            }\n        }\n    }\n/**\n * @param {?=} search\n * @return {?}\n */\npublic optionsOpen(search: string = '') {\n        if (!this.disabled) {\n            this.optionsOpened = true;\n            this.subjSearchText.next(search);\n            if (!this.multiple && this.subjOptionsSelected.value.length) {\n                this.optionsFilteredFlat().subscribe((options: NgxSelectOption[]) => this.optionActivate({\n                    activeOption: this.subjOptionsSelected.value[0],\n                    filteredOptionList: options,\n                    index: options.indexOf(this.subjOptionsSelected.value[0])\n                }));\n            } else {\n                this.navigateOption(ENavigation.first);\n            }\n            this.focusToInput();\n            this.open.emit();\n        }\n    }\n/**\n * @param {?=} focusToHost\n * @return {?}\n */\npublic optionsClose(focusToHost: boolean = false) {\n        this.optionsOpened = false;\n        if (focusToHost) {\n            const /** @type {?} */ x = window.scrollX, /** @type {?} */ y = window.scrollY;\n            this.mainElRef.nativeElement.focus();\n            window.scrollTo(x, y);\n        }\n        this.close.emit();\n\n        if (this.autoClearSearch && this.multiple && this.inputElRef) {\n            this.inputElRef.nativeElement.value = null;\n        }\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate buildOptions(data: any[]): Array<NgxSelectOption | NgxSelectOptGroup> {\n        const /** @type {?} */ result: Array<NgxSelectOption | NgxSelectOptGroup> = [];\n        if (Array.isArray(data)) {\n            let /** @type {?} */ option: NgxSelectOption;\n            data.forEach((item: any) => {\n                const /** @type {?} */ isOptGroup = typeof item === 'object' && item !== null &&\n                    propertyExists(item, this.optGroupLabelField) && propertyExists(item, this.optGroupOptionsField) &&\n                    Array.isArray(item[this.optGroupOptionsField]);\n                if (isOptGroup) {\n                    const /** @type {?} */ optGroup = new NgxSelectOptGroup(item[this.optGroupLabelField]);\n                    item[this.optGroupOptionsField].forEach((subOption: NgxSelectOption) => {\n                        if (option = this.buildOption(subOption, optGroup)) {\n                            optGroup.options.push(option);\n                        }\n                    });\n                    result.push(optGroup);\n                } else if (option = this.buildOption(item, null)) {\n                    result.push(option);\n                }\n            });\n        }\n        return result;\n    }\n/**\n * @param {?} data\n * @param {?} parent\n * @return {?}\n */\nprivate buildOption(data: any, parent: NgxSelectOptGroup): NgxSelectOption {\n        let /** @type {?} */ value, /** @type {?} */ text, /** @type {?} */ disabled;\n        if (typeof data === 'string' || typeof data === 'number') {\n            value = text = data;\n            disabled = false;\n        } else if (typeof data === 'object' && data !== null &&\n            (propertyExists(data, this.optionValueField) || propertyExists(data, this.optionTextField))) {\n            value = propertyExists(data, this.optionValueField) ? data[this.optionValueField] : data[this.optionTextField];\n            text = propertyExists(data, this.optionTextField) ? data[this.optionTextField] : data[this.optionValueField];\n            disabled = propertyExists(data, 'disabled') ? data['disabled'] : false;\n        } else {\n            return null;\n        }\n        return new NgxSelectOption(value, text, disabled, data, parent);\n    }\npublic onChange = (v: any) => v;\npublic onTouched: () => void = () => null;\n/**\n * @param {?} obj\n * @return {?}\n */\npublic writeValue(obj: any): void {\n        this.subjExternalValue.next(obj);\n    }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnChange(fn: (_: any) => {}): void {\n        this.onChange = fn;\n        this.subjRegisterOnChange.next();\n    }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnTouched(fn: () => {}): void {\n        this.onTouched = fn;\n    }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\npublic setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ngx-select',\n    template: `\n      <div #main [tabindex]=\"disabled? -1: 0\" class=\"ngx-select dropdown\"\n           [ngClass]=\"setFormControlSize({\n              'ngx-select_multiple form-control': multiple === true,\n              'open show': optionsOpened && optionsFiltered.length\n           }, multiple === true)\"\n           (click)=\"mainClicked($event)\" (focusin)=\"mainClicked($event)\"\n           (focus)=\"focusToInput()\" (keydown)=\"inputKeyDown($event)\"\n           (keyup)=\"mainKeyUp($event)\">\n          <div [ngClass]=\"{ 'ngx-select__disabled': disabled}\"></div>\n\n          <!-- single selected item -->\n          <div class=\"ngx-select__selected\"\n               *ngIf=\"(multiple === false) && (!optionsOpened || noAutoComplete)\">\n              <div class=\"ngx-select__toggle btn form-control\" [ngClass]=\"setFormControlSize(setBtnSize())\"\n                   (click)=\"optionsOpen()\">\n\n                  <span *ngIf=\"!optionsSelected.length\" class=\"ngx-select__placeholder text-muted\">\n                      <span [innerHtml]=\"placeholder\"></span>\n                  </span>\n                  <span *ngIf=\"optionsSelected.length\"\n                        class=\"ngx-select__selected-single pull-left float-left\"\n                        [ngClass]=\"{'ngx-select__allow-clear': allowClear}\">\n                      <ng-container [ngTemplateOutlet]=\"templateSelectedOption || defaultTemplateOption\"\n                                    [ngTemplateOutletContext]=\"{$implicit: optionsSelected[0], index: 0,\n                                                                text: sanitize(optionsSelected[0].text)}\">\n                      </ng-container>\n                  </span>\n                  <span class=\"ngx-select__toggle-buttons\">\n                      <a class=\"ngx-select__clear btn btn-sm btn-link\" *ngIf=\"canClearNotMultiple()\"\n                         [ngClass]=\"setBtnSize()\"\n                         (click)=\"optionRemove(optionsSelected[0], $event)\">\n                          <i class=\"ngx-select__clear-icon\"></i>\n                      </a>\n                      <i class=\"dropdown-toggle\"></i>\n                      <i class=\"ngx-select__toggle-caret caret\"></i>\n                  </span>\n              </div>\n          </div>\n\n          <!-- multiple selected items -->\n          <div class=\"ngx-select__selected\" *ngIf=\"multiple === true\">\n              <span *ngFor=\"let option of optionsSelected; trackBy: trackByOption; let idx = index\">\n                  <span tabindex=\"-1\" [ngClass]=\"setBtnSize()\"\n                        class=\"ngx-select__selected-plural btn btn-default btn-secondary btn-xs\">\n\n                      <ng-container [ngTemplateOutlet]=\"templateSelectedOption || defaultTemplateOption\"\n                                    [ngTemplateOutletContext]=\"{$implicit: option, index: idx, text: sanitize(option.text)}\">\n                      </ng-container>\n\n                      <a class=\"ngx-select__clear btn btn-sm btn-link pull-right float-right\" [ngClass]=\"setBtnSize()\"\n                         (click)=\"optionRemove(option, $event)\">\n                          <i class=\"ngx-select__clear-icon\"></i>\n                      </a>\n                  </span>\n              </span>\n          </div>\n\n          <!-- live search an item from the list -->\n          <input #input type=\"text\" class=\"ngx-select__search form-control\" [ngClass]=\"setFormControlSize()\"\n                 *ngIf=\"checkInputVisibility()\"\n                 [tabindex]=\"multiple === false? -1: 0\"\n                 (keydown)=\"inputKeyDown($event)\"\n                 (keyup)=\"inputKeyUp(input.value)\"\n                 (input)=\"doInputText(input.value)\"\n                 [disabled]=\"disabled\"\n                 [placeholder]=\"optionsSelected.length? '': placeholder\"\n                 (click)=\"inputClick(input.value)\"\n                 autocomplete=\"false\"\n                 autocorrect=\"off\"\n                 autocapitalize=\"off\"\n                 spellcheck=\"false\"\n                 role=\"combobox\">\n\n          <!-- options template -->\n          <ul #choiceMenu role=\"menu\" *ngIf=\"isFocused\" class=\"ngx-select__choices dropdown-menu\"\n              [class.show]=\"optionsOpened && subjOptions.value.length\">\n              <li class=\"ngx-select__item-group\" role=\"menuitem\"\n                  *ngFor=\"let opt of optionsFiltered; trackBy: trackByOption; let idxGroup=index\">\n                  <div class=\"divider dropdown-divider\" *ngIf=\"opt.type === 'optgroup' && (idxGroup > 0)\"></div>\n                  <div class=\"dropdown-header\" *ngIf=\"opt.type === 'optgroup'\">{{opt.label}}</div>\n\n                  <a href=\"#\" #choiceItem class=\"ngx-select__item dropdown-item\"\n                     *ngFor=\"let option of (opt.optionsFiltered || [opt]); trackBy: trackByOption; let idxOption = index\"\n                     [ngClass]=\"{\n                          'ngx-select__item_active active': isOptionActive(option, choiceItem),\n                          'ngx-select__item_disabled disabled': option.disabled\n                     }\"\n                     (mouseenter)=\"optionActivate({\n                          activeOption: option,\n                          filteredOptionList: optionsFiltered,\n                          index: optionsFiltered.indexOf(option)\n                     })\"\n                     (click)=\"optionSelect(option, $event)\">\n                      <ng-container [ngTemplateOutlet]=\"templateOption || defaultTemplateOption\"\n                                    [ngTemplateOutletContext]=\"{$implicit: option, text: highlightOption(option),\n                                    index: idxGroup, subIndex: idxOption}\"></ng-container>\n                  </a>\n              </li>\n              <li class=\"ngx-select__item ngx-select__item_no-found dropdown-header\" *ngIf=\"!optionsFiltered.length\">\n                  <ng-container [ngTemplateOutlet]=\"templateOptionNotFound || defaultTemplateOptionNotFound\"></ng-container>\n              </li>\n          </ul>\n\n          <!--Default templates-->\n          <ng-template #defaultTemplateOption let-text=\"text\">\n              <span [innerHtml]=\"text\"></span>\n          </ng-template>\n\n          <ng-template #defaultTemplateOptionNotFound>\n              {{noResultsFound}}\n          </ng-template>\n\n      </div>\n    `,\n    styles: [`\n      .ngx-select {\n        /* Fix caret going into new line in Firefox */ }\n        .ngx-select_multiple {\n          height: auto;\n          padding: 3px 3px 0 3px; }\n        .ngx-select_multiple .ngx-select__search {\n          background-color: transparent !important;\n          /* To prevent double background when disabled */\n          border: none;\n          outline: none;\n          -webkit-box-shadow: none;\n                  box-shadow: none;\n          height: 1.6666em;\n          padding: 0;\n          margin-bottom: 3px; }\n        .ngx-select__disabled {\n          background-color: #eceeef;\n          border-radius: 4px;\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          z-index: 5;\n          opacity: 0.6;\n          top: 0;\n          left: 0;\n          cursor: not-allowed; }\n        .ngx-select__toggle {\n          outline: 0;\n          position: relative;\n          text-align: left !important;\n          /* Instead of center because of .btn */\n          color: #333;\n          background-color: #fff;\n          border-color: #ccc;\n          display: -webkit-inline-box;\n          display: -ms-inline-flexbox;\n          display: inline-flex;\n          -webkit-box-align: stretch;\n              -ms-flex-align: stretch;\n                  align-items: stretch;\n          -webkit-box-pack: justify;\n              -ms-flex-pack: justify;\n                  justify-content: space-between; }\n          .ngx-select__toggle:hover {\n            color: #333;\n            background-color: #e6e6e6;\n            border-color: #adadad; }\n        .ngx-select__toggle-buttons {\n          -ms-flex-negative: 0;\n              flex-shrink: 0;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex;\n          -webkit-box-align: center;\n              -ms-flex-align: center;\n                  align-items: center; }\n        .ngx-select__toggle-caret {\n          position: absolute;\n          height: 10px;\n          top: 50%;\n          right: 10px;\n          margin-top: -2px; }\n        .ngx-select__placeholder {\n          float: left; }\n        .ngx-select__clear {\n          margin-right: 10px;\n          padding: 0;\n          border: none; }\n        .ngx-select_multiple .ngx-select__clear {\n          line-height: initial;\n          margin-left: 5px;\n          margin-right: 0;\n          color: #000;\n          opacity: .5; }\n        .ngx-select__clear-icon {\n          display: inline-block;\n          font-size: inherit;\n          cursor: pointer;\n          position: relative;\n          width: 1em;\n          height: .75em;\n          padding: 0; }\n          .ngx-select__clear-icon:before, .ngx-select__clear-icon:after {\n            content: '';\n            position: absolute;\n            border-top: 3px solid;\n            width: 100%;\n            top: 50%;\n            left: 0;\n            margin-top: -1px; }\n          .ngx-select__clear-icon:before {\n            -webkit-transform: rotate(45deg);\n                    transform: rotate(45deg); }\n          .ngx-select__clear-icon:after {\n            -webkit-transform: rotate(-45deg);\n                    transform: rotate(-45deg); }\n        .ngx-select__choices {\n          width: 100%;\n          height: auto;\n          max-height: 200px;\n          overflow-x: hidden;\n          margin-top: 0;\n          position: absolute; }\n        .ngx-select_multiple .ngx-select__choices {\n          margin-top: 1px; }\n        .ngx-select__item {\n          display: block;\n          padding: 3px 20px;\n          clear: both;\n          font-weight: 400;\n          line-height: 1.42857143;\n          white-space: nowrap;\n          cursor: pointer;\n          text-decoration: none; }\n        .ngx-select__item_disabled, .ngx-select__item_no-found {\n          cursor: default; }\n        .ngx-select__item_active {\n          color: #fff;\n          outline: 0;\n          background-color: #428bca; }\n        .ngx-select__selected-single, .ngx-select__selected-plural {\n          display: -webkit-inline-box;\n          display: -ms-inline-flexbox;\n          display: inline-flex;\n          -webkit-box-align: center;\n              -ms-flex-align: center;\n                  align-items: center;\n          overflow: hidden; }\n          .ngx-select__selected-single span, .ngx-select__selected-plural span {\n            overflow: hidden;\n            text-overflow: ellipsis; }\n        .ngx-select__selected-plural {\n          outline: 0;\n          margin: 0 3px 3px 0; }\n\n      /* Fix Bootstrap dropdown position when inside a input-group */\n      .input-group > .dropdown {\n        /* Instead of relative */\n        position: static; }\n    `],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => NgxSelectComponent),\n            multi: true\n        }\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: IterableDiffers, },\n{type: DomSanitizer, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Inject, args: [NGX_SELECT_OPTIONS, ] }, { type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'items': [{ type: Input },],\n'optionValueField': [{ type: Input },],\n'optionTextField': [{ type: Input },],\n'optGroupLabelField': [{ type: Input },],\n'optGroupOptionsField': [{ type: Input },],\n'multiple': [{ type: Input },],\n'allowClear': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'noAutoComplete': [{ type: Input },],\n'disabled': [{ type: Input },],\n'defaultValue': [{ type: Input },],\n'autoSelectSingleOption': [{ type: Input },],\n'autoClearSearch': [{ type: Input },],\n'noResultsFound': [{ type: Input },],\n'size': [{ type: Input },],\n'searchCallback': [{ type: Input },],\n'typed': [{ type: Output },],\n'focus': [{ type: Output },],\n'blur': [{ type: Output },],\n'open': [{ type: Output },],\n'close': [{ type: Output },],\n'select': [{ type: Output },],\n'remove': [{ type: Output },],\n'navigated': [{ type: Output },],\n'mainElRef': [{ type: ViewChild, args: ['main', ] },],\n'inputElRef': [{ type: ViewChild, args: ['input', ] },],\n'choiceMenuElRef': [{ type: ViewChild, args: ['choiceMenu', ] },],\n'templateOption': [{ type: ContentChild, args: [NgxSelectOptionDirective, {read: TemplateRef}, ] },],\n'templateSelectedOption': [{ type: ContentChild, args: [NgxSelectOptionSelectedDirective, {read: TemplateRef}, ] },],\n'templateOptionNotFound': [{ type: ContentChild, args: [NgxSelectOptionNotFoundDirective, {read: TemplateRef}, ] },],\n'documentClick': [{ type: HostListener, args: ['document:focusin', ['$event'], ] },{ type: HostListener, args: ['document:click', ['$event'], ] },],\n};\n}\n\nfunction NgxSelectComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxSelectComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxSelectComponent.ctorParameters;\n/** @type {?} */\nNgxSelectComponent.propDecorators;\n/** @type {?} */\nNgxSelectComponent.prototype.items;\n/** @type {?} */\nNgxSelectComponent.prototype.optionValueField;\n/** @type {?} */\nNgxSelectComponent.prototype.optionTextField;\n/** @type {?} */\nNgxSelectComponent.prototype.optGroupLabelField;\n/** @type {?} */\nNgxSelectComponent.prototype.optGroupOptionsField;\n/** @type {?} */\nNgxSelectComponent.prototype.multiple;\n/** @type {?} */\nNgxSelectComponent.prototype.allowClear;\n/** @type {?} */\nNgxSelectComponent.prototype.placeholder;\n/** @type {?} */\nNgxSelectComponent.prototype.noAutoComplete;\n/** @type {?} */\nNgxSelectComponent.prototype.disabled;\n/** @type {?} */\nNgxSelectComponent.prototype.defaultValue;\n/** @type {?} */\nNgxSelectComponent.prototype.autoSelectSingleOption;\n/** @type {?} */\nNgxSelectComponent.prototype.autoClearSearch;\n/** @type {?} */\nNgxSelectComponent.prototype.noResultsFound;\n/** @type {?} */\nNgxSelectComponent.prototype.size;\n/** @type {?} */\nNgxSelectComponent.prototype.searchCallback;\n/** @type {?} */\nNgxSelectComponent.prototype.keyCodeToRemoveSelected;\n/** @type {?} */\nNgxSelectComponent.prototype.keyCodeToOptionsOpen;\n/** @type {?} */\nNgxSelectComponent.prototype.keyCodeToOptionsClose;\n/** @type {?} */\nNgxSelectComponent.prototype.keyCodeToOptionsSelect;\n/** @type {?} */\nNgxSelectComponent.prototype.keyCodeToNavigateFirst;\n/** @type {?} */\nNgxSelectComponent.prototype.keyCodeToNavigatePrevious;\n/** @type {?} */\nNgxSelectComponent.prototype.keyCodeToNavigateNext;\n/** @type {?} */\nNgxSelectComponent.prototype.keyCodeToNavigateLast;\n/** @type {?} */\nNgxSelectComponent.prototype.typed;\n/** @type {?} */\nNgxSelectComponent.prototype.focus;\n/** @type {?} */\nNgxSelectComponent.prototype.blur;\n/** @type {?} */\nNgxSelectComponent.prototype.open;\n/** @type {?} */\nNgxSelectComponent.prototype.close;\n/** @type {?} */\nNgxSelectComponent.prototype.select;\n/** @type {?} */\nNgxSelectComponent.prototype.remove;\n/** @type {?} */\nNgxSelectComponent.prototype.navigated;\n/** @type {?} */\nNgxSelectComponent.prototype.mainElRef;\n/** @type {?} */\nNgxSelectComponent.prototype.inputElRef;\n/** @type {?} */\nNgxSelectComponent.prototype.choiceMenuElRef;\n/** @type {?} */\nNgxSelectComponent.prototype.templateOption;\n/** @type {?} */\nNgxSelectComponent.prototype.templateSelectedOption;\n/** @type {?} */\nNgxSelectComponent.prototype.templateOptionNotFound;\n/** @type {?} */\nNgxSelectComponent.prototype.optionsOpened;\n/** @type {?} */\nNgxSelectComponent.prototype.optionsFiltered;\n/** @type {?} */\nNgxSelectComponent.prototype.optionActive;\n/** @type {?} */\nNgxSelectComponent.prototype.itemsDiffer;\n/** @type {?} */\nNgxSelectComponent.prototype.defaultValueDiffer;\n/** @type {?} */\nNgxSelectComponent.prototype.actualValue;\n/** @type {?} */\nNgxSelectComponent.prototype.subjOptions;\n/** @type {?} */\nNgxSelectComponent.prototype.subjSearchText;\n/** @type {?} */\nNgxSelectComponent.prototype.subjOptionsSelected;\n/** @type {?} */\nNgxSelectComponent.prototype.subjExternalValue;\n/** @type {?} */\nNgxSelectComponent.prototype.subjDefaultValue;\n/** @type {?} */\nNgxSelectComponent.prototype.subjRegisterOnChange;\n/** @type {?} */\nNgxSelectComponent.prototype.cacheOptionsFilteredFlat;\n/** @type {?} */\nNgxSelectComponent.prototype.cacheElementOffsetTop;\n/** @type {?} */\nNgxSelectComponent.prototype._focusToInput;\n/** @type {?} */\nNgxSelectComponent.prototype.isFocused;\n/** @type {?} */\nNgxSelectComponent.prototype.onChange;\n/** @type {?} */\nNgxSelectComponent.prototype.onTouched;\n/** @type {?} */\nNgxSelectComponent.prototype.sanitizer;\n/** @type {?} */\nNgxSelectComponent.prototype.cd;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NGX_SELECT_OPTIONS, NgxSelectComponent} from './ngx-select.component';\nimport {NgxSelectOptionDirective, NgxSelectOptionNotFoundDirective, NgxSelectOptionSelectedDirective} from './ngx-templates.directive';\nimport {INgxSelectOptions} from './ngx-select.interfaces';\nexport class NgxSelectModule {\n/**\n * @param {?} options\n * @return {?}\n */\nstatic forRoot(options: INgxSelectOptions): ModuleWithProviders {\n        return {\n            ngModule: NgxSelectModule,\n            providers: [{provide: NGX_SELECT_OPTIONS, useValue: options}]\n        };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule\n    ],\n    declarations: [NgxSelectComponent,\n        NgxSelectOptionDirective, NgxSelectOptionSelectedDirective, NgxSelectOptionNotFoundDirective\n    ],\n    exports: [NgxSelectComponent,\n        NgxSelectOptionDirective, NgxSelectOptionSelectedDirective, NgxSelectOptionNotFoundDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgxSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxSelectModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["escapeString","escapeStringNs","NgxSelectOption","value","text","disabled","data","_parent","this","type","cacheRenderedText","Object","defineProperty","prototype","get","renderText","sanitizer","highlightText","cacheHighlightText","bypassSecurityTrustHtml","replace","RegExp","NgxSelectOptGroup","label","options","filter","callbackFn","optionsFiltered","option","NgxSelectOptionDirective","template","decorators","Directive","args","selector","ctorParameters","TemplateRef","NgxSelectOptionSelectedDirective","NgxSelectOptionNotFoundDirective","_","lodashNs","NGX_SELECT_OPTIONS","InjectionToken","ENavigation","propertyExists","obj","propertyName","first","previous","next","last","NgxSelectComponent","iterableDiffers","cd","defaultOptions","cacheExternalValue","_this","optionValueField","optionTextField","optGroupLabelField","optGroupOptionsField","multiple","allowClear","placeholder","noAutoComplete","defaultValue","autoSelectSingleOption","autoClearSearch","noResultsFound","size","keyCodeToRemoveSelected","keyCodeToOptionsOpen","keyCodeToOptionsClose","keyCodeToOptionsSelect","keyCodeToNavigateFirst","keyCodeToNavigatePrevious","keyCodeToNavigateNext","keyCodeToNavigateLast","typed","EventEmitter","focus","blur","open","close","select","remove","navigated","optionsOpened","actualValue","subjOptions","BehaviorSubject","subjSearchText","subjOptionsSelected","subjExternalValue","subjDefaultValue","subjRegisterOnChange","Subject","_focusToInput","isFocused","onChange","v","onTouched","assign","itemsDiffer","find","create","defaultValueDiffer","subscribe","subjActualValue","map","concat","merge","o","combineLatest","eVal","dVal","newVal","isEqual","length","distinctUntilChanged","x","y","share","flatMap","Observable","from","of","empty","toArray","optionsFlat","indexOf","selectedOptions","search","filterOptions","cacheOptionsFilteredFlat","optionsFilteredFlat","flatOptions","setFormControlSize","otherClassNames","useFormControl","formControlExtraClasses","form-control-sm input-sm","form-control-lg input-lg","setBtnSize","btn-sm","btn-lg","mainClicked","event","clickedSelectComponent","emit","documentClick","optionsClose","detectChanges","do","navigateOption","navigation","newActiveIdx","index","activeOption","filteredOptionList","optionActive","newNavigated","optionActivate","ngDoCheck","diff","items","buildOptions","defVal","ngAfterContentChecked","checkInputVisibility","inputElRef","nativeElement","document","activeElement","canClearNotMultiple","focusToInput","inputKeyDown","keysForOpenedState","keysForClosedState","code","preventDefault","stopPropagation","optionSelect","optionsOpen","optionRemove","mainKeyUp","trackByOption","inputKeyUp","doInputText","inputClick","sanitize","html","highlightOption","isOptionActive","element","ensureVisibleElement","regExp","filterOption","searchCallback","test","subOp","subOption","choiceMenuElRef","cacheElementOffsetTop","offsetTop","container","scrollTop","offsetHeight","clientHeight","focusToHost","window","scrollX","scrollY","mainElRef","scrollTo","option_1","result","Array","isArray","forEach","item","optGroup_1","buildOption","push","parent","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","Component","styles","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","IterableDiffers","DomSanitizer","ChangeDetectorRef","undefined","Inject","Optional","propDecorators","Input","Output","ViewChild","templateOption","ContentChild","read","templateSelectedOption","templateOptionNotFound","HostListener","NgxSelectModule","forRoot","ngModule","useValue","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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"}
