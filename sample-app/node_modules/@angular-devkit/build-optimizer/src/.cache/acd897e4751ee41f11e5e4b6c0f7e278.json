{"remainingRequest":"/home/rails/thilin-frontend/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/rails/thilin-frontend/node_modules/angular2-token/fesm5/angular2-token.js","dependencies":[{"path":"/home/rails/thilin-frontend/node_modules/angular2-token/fesm5/angular2-token.js","mtime":499162500000},{"path":"/home/rails/thilin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1530843612988},{"path":"/home/rails/thilin-frontend/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, EventEmitter, Component, Input, NgModule, Optional } from '@angular/core';\nimport { FormGroup, FormControl, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, ActivatedRoute, Router } from '@angular/router';\nimport { Http, Headers, Request, RequestMethod, RequestOptions } from '@angular/http';\nimport { interval, fromEvent } from 'rxjs';\nimport { share, pluck, filter } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar A2tFormService = /*@__PURE__*/ (function () {\n    function A2tFormService() {\n        this.submit$ = new EventEmitter();\n        this.submitLock = false;\n    }\n    /**\n     * @param {?} fields\n     * @return {?}\n     */\n    A2tFormService.prototype.initForm = /**\n     * @param {?} fields\n     * @return {?}\n     */\n        function (fields) {\n            this.fields = fields;\n            this._createFormGroup();\n        };\n    /**\n     * @return {?}\n     */\n    A2tFormService.prototype.submit = /**\n     * @return {?}\n     */\n        function () {\n            this.submitLock = true;\n            this.submit$.emit(this.formGroup.value);\n        };\n    /**\n     * @return {?}\n     */\n    A2tFormService.prototype.unlockSubmit = /**\n     * @return {?}\n     */\n        function () {\n            this.formGroup.reset();\n            this.submitLock = false;\n        };\n    /**\n     * @return {?}\n     */\n    A2tFormService.prototype._createFormGroup = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ group = {};\n            this.fields.forEach(function (question) {\n                group[question.key] = new FormControl(null, question.validators);\n            });\n            this.formGroup = new FormGroup(group);\n        };\n    return A2tFormService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar A2tFormComponent = /*@__PURE__*/ (function () {\n    function A2tFormComponent(_formService) {\n        this._formService = _formService;\n    }\n    return A2tFormComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar BaseField = /*@__PURE__*/ (function () {\n    function BaseField(options) {\n        if (options === void 0) {\n            options = {};\n        }\n        this.value = options.value;\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.validators = options.validators === undefined ? [] : options.validators;\n        this.type = options.type || '';\n    }\n    return BaseField;\n}());\nvar /** @type {?} */ SIGN_IN_FORM = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\nvar /** @type {?} */ SIGN_UP_FORM = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordConfirmation',\n        label: 'Password Confirmation',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\nvar /** @type {?} */ RESET_PASSWORD_FORM = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\nvar /** @type {?} */ UPDATE_PASSWORD_FORM = [\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordConfirmation',\n        label: 'Password Confirmation',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordCurrent',\n        label: 'Old Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar A2tFormFieldComponent = /*@__PURE__*/ (function () {\n    function A2tFormFieldComponent() {\n    }\n    /**\n     * @return {?}\n     */\n    A2tFormFieldComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this._control = this.form.controls[this.question.key];\n        };\n    Object.defineProperty(A2tFormFieldComponent.prototype, \"isValid\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._control.valid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return A2tFormFieldComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar A2tLinksComponent = /*@__PURE__*/ (function () {\n    function A2tLinksComponent() {\n    }\n    return A2tLinksComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar A2tErrorComponent = /*@__PURE__*/ (function () {\n    function A2tErrorComponent() {\n    }\n    return A2tErrorComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar A2tHeadlineComponent = /*@__PURE__*/ (function () {\n    function A2tHeadlineComponent() {\n    }\n    return A2tHeadlineComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar A2tSharedModule = /*@__PURE__*/ (function () {\n    function A2tSharedModule() {\n    }\n    return A2tSharedModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Angular2TokenService = /*@__PURE__*/ (function () {\n    function Angular2TokenService(http, activatedRoute, router) {\n        this.http = http;\n        this.activatedRoute = activatedRoute;\n        this.router = router;\n    }\n    Object.defineProperty(Angular2TokenService.prototype, \"currentUserType\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.atCurrentUserType != null)\n                return this.atCurrentUserType.name;\n            else\n                return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Angular2TokenService.prototype, \"currentUserData\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.atCurrentUserData;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Angular2TokenService.prototype, \"currentAuthData\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.atCurrentAuthData;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Angular2TokenService.prototype, \"currentAuthHeaders\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            if (this.atCurrentAuthData != null) {\n                return new Headers({\n                    'access-token': this.atCurrentAuthData.accessToken,\n                    'client': this.atCurrentAuthData.client,\n                    'expiry': this.atCurrentAuthData.expiry,\n                    'token-type': this.atCurrentAuthData.tokenType,\n                    'uid': this.atCurrentAuthData.uid\n                });\n            }\n            return new Headers;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    Angular2TokenService.prototype.userSignedIn = /**\n     * @return {?}\n     */\n        function () {\n            return !!this.atCurrentAuthData;\n        };\n    /**\n     * @return {?}\n     */\n    Angular2TokenService.prototype.canActivate = /**\n     * @return {?}\n     */\n        function () {\n            if (this.userSignedIn())\n                return true;\n            else {\n                // Store current location in storage (usefull for redirection after signing in)\n                if (this.atOptions.signInStoredUrlStorageKey) {\n                    localStorage.setItem(this.atOptions.signInStoredUrlStorageKey, window.location.pathname + window.location.search);\n                }\n                // Redirect user to sign in if signInRedirect is set\n                if (this.router && this.atOptions.signInRedirect)\n                    this.router.navigate([this.atOptions.signInRedirect]);\n                return false;\n            }\n        };\n    // Inital configuration\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n    Angular2TokenService.prototype.init = /**\n     * @param {?=} options\n     * @return {?}\n     */\n        function (options) {\n            var /** @type {?} */ defaultOptions = {\n                apiPath: null,\n                apiBase: null,\n                signInPath: 'auth/sign_in',\n                signInRedirect: null,\n                signInStoredUrlStorageKey: null,\n                signOutPath: 'auth/sign_out',\n                validateTokenPath: 'auth/validate_token',\n                signOutFailedValidate: false,\n                registerAccountPath: 'auth',\n                deleteAccountPath: 'auth',\n                registerAccountCallback: window.location.href,\n                updatePasswordPath: 'auth',\n                resetPasswordPath: 'auth/password',\n                resetPasswordCallback: window.location.href,\n                userTypes: null,\n                oAuthBase: window.location.origin,\n                oAuthPaths: {\n                    github: 'auth/github'\n                },\n                oAuthCallbackPath: 'oauth_callback',\n                oAuthWindowType: 'newWindow',\n                oAuthWindowOptions: null,\n                globalOptions: {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    }\n                }\n            };\n            this.atOptions = ((Object)).assign(defaultOptions, options);\n            this.tryLoadAuthData();\n        };\n    /**\n     *\n     * Actions\n     *\n     */\n    // Register request\n    /**\n     *\n     * Actions\n     *\n     * @param {?} registerData\n     * @return {?}\n     */\n    Angular2TokenService.prototype.registerAccount = /**\n     *\n     * Actions\n     *\n     * @param {?} registerData\n     * @return {?}\n     */\n        function (registerData) {\n            if (registerData.userType == null)\n                this.atCurrentUserType = null;\n            else {\n                this.atCurrentUserType = this.getUserTypeByName(registerData.userType);\n                delete registerData.userType;\n            }\n            if (registerData[\"password_confirmation\"] == null &&\n                registerData.passwordConfirmation != null) {\n                registerData[\"password_confirmation\"] = registerData.passwordConfirmation;\n                delete registerData.passwordConfirmation;\n            }\n            registerData[\"confirm_success_url\"] = this.atOptions.registerAccountCallback;\n            return this.post(this.getUserPath() + this.atOptions.registerAccountPath, JSON.stringify(registerData));\n        };\n    // Delete Account\n    /**\n     * @return {?}\n     */\n    Angular2TokenService.prototype.deleteAccount = /**\n     * @return {?}\n     */\n        function () {\n            return this.delete(this.getUserPath() + this.atOptions.deleteAccountPath);\n        };\n    // Sign in request and set storage\n    /**\n     * @param {?} signInData\n     * @return {?}\n     */\n    Angular2TokenService.prototype.signIn = /**\n     * @param {?} signInData\n     * @return {?}\n     */\n        function (signInData) {\n            var _this = this;\n            if (signInData.userType == null)\n                this.atCurrentUserType = null;\n            else\n                this.atCurrentUserType = this.getUserTypeByName(signInData.userType);\n            var /** @type {?} */ body = JSON.stringify({\n                email: signInData.email,\n                password: signInData.password\n            });\n            var /** @type {?} */ observ = this.post(this.getUserPath() + this.atOptions.signInPath, body);\n            observ.subscribe(function (res) { return _this.atCurrentUserData = res.json().data; }, function (_error) { return null; });\n            return observ;\n        };\n    /**\n     * @param {?} oAuthType\n     * @return {?}\n     */\n    Angular2TokenService.prototype.signInOAuth = /**\n     * @param {?} oAuthType\n     * @return {?}\n     */\n        function (oAuthType) {\n            var /** @type {?} */ oAuthPath = this.getOAuthPath(oAuthType);\n            var /** @type {?} */ callbackUrl = window.location.origin + \"/\" + this.atOptions.oAuthCallbackPath;\n            var /** @type {?} */ oAuthWindowType = this.atOptions.oAuthWindowType;\n            var /** @type {?} */ authUrl = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);\n            if (oAuthWindowType == 'newWindow') {\n                var /** @type {?} */ oAuthWindowOptions = this.atOptions.oAuthWindowOptions;\n                var /** @type {?} */ windowOptions = '';\n                if (oAuthWindowOptions) {\n                    for (var /** @type {?} */ key in oAuthWindowOptions) {\n                        windowOptions += \",\" + key + \"=\" + oAuthWindowOptions[key];\n                    }\n                }\n                var /** @type {?} */ popup = window.open(authUrl, '_blank', \"closebuttoncaption=Cancel\" + windowOptions);\n                return this.requestCredentialsViaPostMessage(popup);\n            }\n            else if (oAuthWindowType == 'sameWindow') {\n                window.location.href = authUrl;\n            }\n            else {\n                throw \"Unsupported oAuthWindowType \\\"\" + oAuthWindowType + \"\\\"\";\n            }\n        };\n    /**\n     * @return {?}\n     */\n    Angular2TokenService.prototype.processOAuthCallback = /**\n     * @return {?}\n     */\n        function () {\n            this.getAuthDataFromParams();\n        };\n    // Sign out request and delete storage\n    /**\n     * @return {?}\n     */\n    Angular2TokenService.prototype.signOut = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ observ = this.delete(this.getUserPath() + this.atOptions.signOutPath);\n            localStorage.removeItem('accessToken');\n            localStorage.removeItem('client');\n            localStorage.removeItem('expiry');\n            localStorage.removeItem('tokenType');\n            localStorage.removeItem('uid');\n            this.atCurrentAuthData = null;\n            this.atCurrentUserType = null;\n            this.atCurrentUserData = null;\n            return observ;\n        };\n    // Validate token request\n    /**\n     * @return {?}\n     */\n    Angular2TokenService.prototype.validateToken = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var /** @type {?} */ observ = this.get(this.getUserPath() + this.atOptions.validateTokenPath);\n            observ.subscribe(function (res) { return _this.atCurrentUserData = res.json().data; }, function (error) {\n                if (error.status === 401 && _this.atOptions.signOutFailedValidate) {\n                    _this.signOut();\n                }\n            });\n            return observ;\n        };\n    // Update password request\n    /**\n     * @param {?} updatePasswordData\n     * @return {?}\n     */\n    Angular2TokenService.prototype.updatePassword = /**\n     * @param {?} updatePasswordData\n     * @return {?}\n     */\n        function (updatePasswordData) {\n            if (updatePasswordData.userType != null)\n                this.atCurrentUserType = this.getUserTypeByName(updatePasswordData.userType);\n            var /** @type {?} */ args;\n            if (updatePasswordData.passwordCurrent == null) {\n                args = {\n                    password: updatePasswordData.password,\n                    password_confirmation: updatePasswordData.passwordConfirmation\n                };\n            }\n            else {\n                args = {\n                    current_password: updatePasswordData.passwordCurrent,\n                    password: updatePasswordData.password,\n                    password_confirmation: updatePasswordData.passwordConfirmation\n                };\n            }\n            if (updatePasswordData.resetPasswordToken) {\n                args.reset_password_token = updatePasswordData.resetPasswordToken;\n            }\n            var /** @type {?} */ body = JSON.stringify(args);\n            return this.put(this.getUserPath() + this.atOptions.updatePasswordPath, body);\n        };\n    // Reset password request\n    /**\n     * @param {?} resetPasswordData\n     * @return {?}\n     */\n    Angular2TokenService.prototype.resetPassword = /**\n     * @param {?} resetPasswordData\n     * @return {?}\n     */\n        function (resetPasswordData) {\n            if (resetPasswordData.userType == null)\n                this.atCurrentUserType = null;\n            else\n                this.atCurrentUserType = this.getUserTypeByName(resetPasswordData.userType);\n            var /** @type {?} */ body = JSON.stringify({\n                email: resetPasswordData.email,\n                redirect_url: this.atOptions.resetPasswordCallback\n            });\n            return this.post(this.getUserPath() + this.atOptions.resetPasswordPath, body);\n        };\n    /**\n     *\n     * HTTP Wrappers\n     *\n     */\n    /**\n     *\n     * HTTP Wrappers\n     *\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Angular2TokenService.prototype.get = /**\n     *\n     * HTTP Wrappers\n     *\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n        function (url, options) {\n            return this.request(this.mergeRequestOptionsArgs({\n                url: this.getApiPath() + url,\n                method: RequestMethod.Get\n            }, options));\n        };\n    /**\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Angular2TokenService.prototype.post = /**\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n        function (url, body, options) {\n            return this.request(this.mergeRequestOptionsArgs({\n                url: this.getApiPath() + url,\n                method: RequestMethod.Post,\n                body: body\n            }, options));\n        };\n    /**\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Angular2TokenService.prototype.put = /**\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n        function (url, body, options) {\n            return this.request(this.mergeRequestOptionsArgs({\n                url: this.getApiPath() + url,\n                method: RequestMethod.Put,\n                body: body\n            }, options));\n        };\n    /**\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Angular2TokenService.prototype.delete = /**\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n        function (url, options) {\n            return this.request(this.mergeRequestOptionsArgs({\n                url: this.getApiPath() + url,\n                method: RequestMethod.Delete\n            }, options));\n        };\n    /**\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Angular2TokenService.prototype.patch = /**\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n        function (url, body, options) {\n            return this.request(this.mergeRequestOptionsArgs({\n                url: this.getApiPath() + url,\n                method: RequestMethod.Patch,\n                body: body\n            }, options));\n        };\n    /**\n     * @param {?} path\n     * @param {?=} options\n     * @return {?}\n     */\n    Angular2TokenService.prototype.head = /**\n     * @param {?} path\n     * @param {?=} options\n     * @return {?}\n     */\n        function (path, options) {\n            return this.request({\n                method: RequestMethod.Head,\n                url: this.getApiPath() + path\n            });\n        };\n    /**\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Angular2TokenService.prototype.options = /**\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n        function (url, options) {\n            return this.request(this.mergeRequestOptionsArgs({\n                url: this.getApiPath() + url,\n                method: RequestMethod.Options\n            }, options));\n        };\n    // Construct and send Http request\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    Angular2TokenService.prototype.request = /**\n     * @param {?} options\n     * @return {?}\n     */\n        function (options) {\n            var /** @type {?} */ baseRequestOptions;\n            var /** @type {?} */ baseHeaders = this.atOptions.globalOptions.headers;\n            // Get auth data from local storage\n            this.getAuthDataFromStorage();\n            // Merge auth headers to request if set\n            if (this.atCurrentAuthData != null) {\n                ((Object)).assign(baseHeaders, {\n                    'access-token': this.atCurrentAuthData.accessToken,\n                    'client': this.atCurrentAuthData.client,\n                    'expiry': this.atCurrentAuthData.expiry,\n                    'token-type': this.atCurrentAuthData.tokenType,\n                    'uid': this.atCurrentAuthData.uid\n                });\n            }\n            baseRequestOptions = new RequestOptions({\n                headers: new Headers(baseHeaders)\n            });\n            // Merge standard and custom RequestOptions\n            baseRequestOptions = baseRequestOptions.merge(options);\n            var /** @type {?} */ response = this.http.request(new Request(baseRequestOptions)).pipe(share());\n            this.handleResponse(response);\n            return response;\n        };\n    /**\n     * @param {?} options\n     * @param {?=} addOptions\n     * @return {?}\n     */\n    Angular2TokenService.prototype.mergeRequestOptionsArgs = /**\n     * @param {?} options\n     * @param {?=} addOptions\n     * @return {?}\n     */\n        function (options, addOptions) {\n            var /** @type {?} */ returnOptions = options;\n            if (options)\n                ((Object)).assign(returnOptions, addOptions);\n            return returnOptions;\n        };\n    /**\n     * @param {?} response\n     * @return {?}\n     */\n    Angular2TokenService.prototype.handleResponse = /**\n     * @param {?} response\n     * @return {?}\n     */\n        function (response) {\n            var _this = this;\n            response.subscribe(function (res) {\n                _this.getAuthHeadersFromResponse(/** @type {?} */ (res));\n            }, function (error) {\n                _this.getAuthHeadersFromResponse(/** @type {?} */ (error));\n            });\n        };\n    /**\n     *\n     * Get Auth Data\n     *\n     * @return {?}\n     */\n    Angular2TokenService.prototype.tryLoadAuthData = /**\n     *\n     * Get Auth Data\n     *\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ userType = this.getUserTypeByName(localStorage.getItem('userType'));\n            if (userType)\n                this.atCurrentUserType = userType;\n            this.getAuthDataFromStorage();\n            if (this.activatedRoute)\n                this.getAuthDataFromParams();\n            if (this.atCurrentAuthData)\n                this.validateToken();\n        };\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    Angular2TokenService.prototype.getAuthHeadersFromResponse = /**\n     * @param {?} data\n     * @return {?}\n     */\n        function (data) {\n            var /** @type {?} */ headers = data.headers;\n            var /** @type {?} */ authData = {\n                accessToken: headers.get('access-token'),\n                client: headers.get('client'),\n                expiry: headers.get('expiry'),\n                tokenType: headers.get('token-type'),\n                uid: headers.get('uid')\n            };\n            this.setAuthData(authData);\n        };\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    Angular2TokenService.prototype.getAuthDataFromPostMessage = /**\n     * @param {?} data\n     * @return {?}\n     */\n        function (data) {\n            var /** @type {?} */ authData = {\n                accessToken: data['auth_token'],\n                client: data['client_id'],\n                expiry: data['expiry'],\n                tokenType: 'Bearer',\n                uid: data['uid']\n            };\n            this.setAuthData(authData);\n        };\n    /**\n     * @return {?}\n     */\n    Angular2TokenService.prototype.getAuthDataFromStorage = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ authData = {\n                accessToken: localStorage.getItem('accessToken'),\n                client: localStorage.getItem('client'),\n                expiry: localStorage.getItem('expiry'),\n                tokenType: localStorage.getItem('tokenType'),\n                uid: localStorage.getItem('uid')\n            };\n            if (this.checkAuthData(authData))\n                this.atCurrentAuthData = authData;\n        };\n    /**\n     * @return {?}\n     */\n    Angular2TokenService.prototype.getAuthDataFromParams = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.activatedRoute.queryParams)\n                // Fix for Testing, needs to be removed later\n                this.activatedRoute.queryParams.subscribe(function (queryParams) {\n                    var /** @type {?} */ authData = {\n                        accessToken: queryParams['token'] || queryParams['auth_token'],\n                        client: queryParams['client_id'],\n                        expiry: queryParams['expiry'],\n                        tokenType: 'Bearer',\n                        uid: queryParams['uid']\n                    };\n                    if (_this.checkAuthData(authData))\n                        _this.atCurrentAuthData = authData;\n                });\n        };\n    /**\n     *\n     * Set Auth Data\n     *\n     * @param {?} authData\n     * @return {?}\n     */\n    Angular2TokenService.prototype.setAuthData = /**\n     *\n     * Set Auth Data\n     *\n     * @param {?} authData\n     * @return {?}\n     */\n        function (authData) {\n            if (this.checkAuthData(authData)) {\n                this.atCurrentAuthData = authData;\n                localStorage.setItem('accessToken', authData.accessToken);\n                localStorage.setItem('client', authData.client);\n                localStorage.setItem('expiry', authData.expiry);\n                localStorage.setItem('tokenType', authData.tokenType);\n                localStorage.setItem('uid', authData.uid);\n                if (this.atCurrentUserType != null)\n                    localStorage.setItem('userType', this.atCurrentUserType.name);\n            }\n        };\n    /**\n     *\n     * Validate Auth Data\n     *\n     * @param {?} authData\n     * @return {?}\n     */\n    Angular2TokenService.prototype.checkAuthData = /**\n     *\n     * Validate Auth Data\n     *\n     * @param {?} authData\n     * @return {?}\n     */\n        function (authData) {\n            if (authData.accessToken != null &&\n                authData.client != null &&\n                authData.expiry != null &&\n                authData.tokenType != null &&\n                authData.uid != null) {\n                if (this.atCurrentAuthData != null)\n                    return authData.expiry >= this.atCurrentAuthData.expiry;\n                else\n                    return true;\n            }\n            else {\n                return false;\n            }\n        };\n    /**\n     *\n     * Construct Paths / Urls\n     *\n     * @return {?}\n     */\n    Angular2TokenService.prototype.getUserPath = /**\n     *\n     * Construct Paths / Urls\n     *\n     * @return {?}\n     */\n        function () {\n            if (this.atCurrentUserType == null)\n                return '';\n            else\n                return this.atCurrentUserType.path + '/';\n        };\n    /**\n     * @return {?}\n     */\n    Angular2TokenService.prototype.getApiPath = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ constructedPath = '';\n            if (this.atOptions.apiBase != null)\n                constructedPath += this.atOptions.apiBase + '/';\n            if (this.atOptions.apiPath != null)\n                constructedPath += this.atOptions.apiPath + '/';\n            return constructedPath;\n        };\n    /**\n     * @param {?} oAuthType\n     * @return {?}\n     */\n    Angular2TokenService.prototype.getOAuthPath = /**\n     * @param {?} oAuthType\n     * @return {?}\n     */\n        function (oAuthType) {\n            var /** @type {?} */ oAuthPath;\n            oAuthPath = this.atOptions.oAuthPaths[oAuthType];\n            if (oAuthPath == null)\n                oAuthPath = \"/auth/\" + oAuthType;\n            return oAuthPath;\n        };\n    /**\n     * @param {?} oAuthPath\n     * @param {?} callbackUrl\n     * @param {?} windowType\n     * @return {?}\n     */\n    Angular2TokenService.prototype.getOAuthUrl = /**\n     * @param {?} oAuthPath\n     * @param {?} callbackUrl\n     * @param {?} windowType\n     * @return {?}\n     */\n        function (oAuthPath, callbackUrl, windowType) {\n            var /** @type {?} */ url;\n            url = this.atOptions.oAuthBase + \"/\" + oAuthPath;\n            url += \"?omniauth_window_type=\" + windowType;\n            url += \"&auth_origin_url=\" + encodeURIComponent(callbackUrl);\n            if (this.atCurrentUserType != null)\n                url += \"&resource_class=\" + this.atCurrentUserType.name;\n            return url;\n        };\n    /**\n     *\n     * OAuth\n     *\n     * @param {?} authWindow\n     * @return {?}\n     */\n    Angular2TokenService.prototype.requestCredentialsViaPostMessage = /**\n     *\n     * OAuth\n     *\n     * @param {?} authWindow\n     * @return {?}\n     */\n        function (authWindow) {\n            var /** @type {?} */ pollerObserv = interval(500);\n            var /** @type {?} */ responseObserv = fromEvent(window, 'message').pipe(pluck('data'), filter(this.oAuthWindowResponseFilter));\n            var /** @type {?} */ responseSubscription = responseObserv.subscribe(this.getAuthDataFromPostMessage.bind(this));\n            var /** @type {?} */ pollerSubscription = pollerObserv.subscribe(function () {\n                if (authWindow.closed)\n                    pollerSubscription.unsubscribe();\n                else\n                    authWindow.postMessage('requestCredentials', '*');\n            });\n            return responseObserv;\n        };\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    Angular2TokenService.prototype.oAuthWindowResponseFilter = /**\n     * @param {?} data\n     * @return {?}\n     */\n        function (data) {\n            if (data.message == 'deliverCredentials' || data.message == 'authFailure')\n                return data;\n        };\n    /**\n     *\n     * Utilities\n     *\n     * @param {?} name\n     * @return {?}\n     */\n    Angular2TokenService.prototype.getUserTypeByName = /**\n     *\n     * Utilities\n     *\n     * @param {?} name\n     * @return {?}\n     */\n        function (name) {\n            if (name == null || this.atOptions.userTypes == null)\n                return null;\n            return this.atOptions.userTypes.find(function (userType) { return userType.name === name; });\n        };\n    return Angular2TokenService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar A2tUiComponent = /*@__PURE__*/ (function () {\n    function A2tUiComponent() {\n    }\n    return A2tUiComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar A2tSignInComponent = /*@__PURE__*/ (function () {\n    function A2tSignInComponent(_formService, _sessionService, _router) {\n        var _this = this;\n        this._formService = _formService;\n        this._sessionService = _sessionService;\n        this._router = _router;\n        this._formService.initForm(SIGN_IN_FORM);\n        this._formService.submit$.subscribe(function (data) { return _this._sessionService.signIn(data).subscribe(function (res) { return _this._handleSuccess(res); }, function (error) { return _this._handleError(error); }); });\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    A2tSignInComponent.prototype._handleSuccess = /**\n     * @param {?} data\n     * @return {?}\n     */\n        function (data) {\n            this._errors = null;\n            this._formService.unlockSubmit();\n            this._router.navigate(['restricted']);\n        };\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    A2tSignInComponent.prototype._handleError = /**\n     * @param {?} error\n     * @return {?}\n     */\n        function (error) {\n            this._errors = error.json().errors;\n            this._formService.unlockSubmit();\n        };\n    return A2tSignInComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar A2tSignUpComponent = /*@__PURE__*/ (function () {\n    function A2tSignUpComponent(_formService, _sessionService, _router) {\n        var _this = this;\n        this._formService = _formService;\n        this._sessionService = _sessionService;\n        this._router = _router;\n        this._formService.initForm(SIGN_UP_FORM);\n        this._formService.submit$.subscribe(function (data) { return _this._sessionService.registerAccount(data).subscribe(function (res) { return _this._handleSuccess(res); }, function (error) { return _this._handleError(error); }); });\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    A2tSignUpComponent.prototype._handleSuccess = /**\n     * @param {?} data\n     * @return {?}\n     */\n        function (data) {\n            this._errors = null;\n            this._formService.unlockSubmit();\n            this._router.navigate(['restricted']);\n        };\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    A2tSignUpComponent.prototype._handleError = /**\n     * @param {?} error\n     * @return {?}\n     */\n        function (error) {\n            this._errors = error.json().errors.full_messages;\n            this._formService.unlockSubmit();\n        };\n    return A2tSignUpComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar A2tResetPasswordComponent = /*@__PURE__*/ (function () {\n    function A2tResetPasswordComponent(_formService, _sessionService) {\n        var _this = this;\n        this._formService = _formService;\n        this._sessionService = _sessionService;\n        this._emailSend = false;\n        this._formService.initForm(RESET_PASSWORD_FORM);\n        this._formService.submit$.subscribe(function (data) { return _this._sessionService.resetPassword(data).subscribe(function (res) { return _this._handleSuccess(); }, function (error) { return _this._handleError(); }); });\n    }\n    /**\n     * @return {?}\n     */\n    A2tResetPasswordComponent.prototype._handleSuccess = /**\n     * @return {?}\n     */\n        function () {\n            this._emailSend = true;\n        };\n    /**\n     * @return {?}\n     */\n    A2tResetPasswordComponent.prototype._handleError = /**\n     * @return {?}\n     */\n        function () {\n            this._emailSend = true;\n        };\n    return A2tResetPasswordComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar A2tUpdatePasswordComponent = /*@__PURE__*/ (function () {\n    function A2tUpdatePasswordComponent(_formService, _sessionService, _router) {\n        var _this = this;\n        this._formService = _formService;\n        this._sessionService = _sessionService;\n        this._router = _router;\n        this._formService.initForm(UPDATE_PASSWORD_FORM);\n        this._formService.submit$.subscribe(function (data) { return _this._sessionService.updatePassword(data).subscribe(function (res) { return _this._handleSuccess(res); }, function (error) { return _this._handleError(error); }); });\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    A2tUpdatePasswordComponent.prototype._handleSuccess = /**\n     * @param {?} data\n     * @return {?}\n     */\n        function (data) {\n            this._router.navigate(['session/sign-in']);\n        };\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    A2tUpdatePasswordComponent.prototype._handleError = /**\n     * @param {?} error\n     * @return {?}\n     */\n        function (error) {\n            this._errors = error.json().errors;\n            this._formService.unlockSubmit();\n        };\n    return A2tUpdatePasswordComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ routes = [{\n        path: 'session',\n        component: A2tUiComponent,\n        children: [\n            { path: 'sign-in', component: A2tSignInComponent },\n            { path: 'sign-up', component: A2tSignUpComponent },\n            { path: 'reset-password', component: A2tResetPasswordComponent },\n            {\n                path: 'update-password',\n                component: A2tUpdatePasswordComponent,\n                canActivate: [Angular2TokenService]\n            }\n        ]\n    }];\nvar /** @type {?} */ a2tRoutes = RouterModule.forChild(routes);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar A2tUiModule = /*@__PURE__*/ (function () {\n    function A2tUiModule() {\n    }\n    return A2tUiModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { A2tUiModule, Angular2TokenService, A2tResetPasswordComponent as ɵl, A2tErrorComponent as ɵf, A2tFormFieldComponent as ɵb, A2tFormComponent as ɵc, A2tFormService as ɵd, A2tHeadlineComponent as ɵg, A2tLinksComponent as ɵe, A2tSharedModule as ɵa, A2tSignInComponent as ɵj, A2tSignUpComponent as ɵk, A2tUiComponent as ɵi, a2tRoutes as ɵh, A2tUpdatePasswordComponent as ɵm };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64, \n",null]}