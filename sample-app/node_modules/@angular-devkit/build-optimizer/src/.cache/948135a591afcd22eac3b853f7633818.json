{"remainingRequest":"/home/rails/thilin-frontend/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/rails/thilin-frontend/node_modules/ngx-select-ex/ngx-select-ex.es5.js","dependencies":[{"path":"/home/rails/thilin-frontend/node_modules/ngx-select-ex/ngx-select-ex.es5.js","mtime":499162500000},{"path":"/home/rails/thilin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1530843612988},{"path":"/home/rails/thilin-frontend/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { ChangeDetectorRef, Component, ContentChild, Directive, EventEmitter, HostListener, Inject, InjectionToken, Input, IterableDiffers, NgModule, Optional, Output, TemplateRef, ViewChild, forwardRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Subject as Subject$1 } from 'rxjs/Subject';\nimport { Observable as Observable$1 } from 'rxjs/Observable';\nimport { BehaviorSubject as BehaviorSubject$1 } from 'rxjs/BehaviorSubject';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/combineLatest';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/toArray';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/share';\nimport 'rxjs/add/operator/merge';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/do';\nimport * as lodashNs from 'lodash';\nimport * as escapeStringNs from 'escape-string-regexp';\nvar escapeString$1 = escapeStringNs;\nvar NgxSelectOption = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} value\n     * @param {?} text\n     * @param {?} disabled\n     * @param {?} data\n     * @param {?=} _parent\n     */\n    function NgxSelectOption(value, text, disabled, data, _parent) {\n        if (_parent === void 0) {\n            _parent = null;\n        }\n        this.value = value;\n        this.text = text;\n        this.disabled = disabled;\n        this.data = data;\n        this._parent = _parent;\n        this.type = 'option';\n        this.cacheRenderedText = null;\n    }\n    Object.defineProperty(NgxSelectOption.prototype, \"parent\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._parent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} sanitizer\n     * @param {?} highlightText\n     * @return {?}\n     */\n    NgxSelectOption.prototype.renderText = function (sanitizer, highlightText) {\n        if (this.cacheHighlightText !== highlightText || this.cacheRenderedText === null) {\n            this.cacheHighlightText = highlightText;\n            if (this.cacheHighlightText) {\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml((this.text + '').replace(new RegExp(escapeString$1(this.cacheHighlightText), 'gi'), '<strong>$&</strong>'));\n            }\n            else {\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml(this.text);\n            }\n        }\n        return this.cacheRenderedText;\n    };\n    return NgxSelectOption;\n}());\nvar NgxSelectOptGroup = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} label\n     * @param {?=} options\n     */\n    function NgxSelectOptGroup(label, options) {\n        if (options === void 0) {\n            options = [];\n        }\n        this.label = label;\n        this.options = options;\n        this.type = 'optgroup';\n        this.filter(function () { return true; });\n    }\n    /**\n     * @param {?} callbackFn\n     * @return {?}\n     */\n    NgxSelectOptGroup.prototype.filter = function (callbackFn) {\n        this.optionsFiltered = this.options.filter(function (option) { return callbackFn(option); });\n    };\n    return NgxSelectOptGroup;\n}());\nvar NgxSelectOptionDirective = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} template\n     */\n    function NgxSelectOptionDirective(template) {\n        this.template = template;\n    }\n    return NgxSelectOptionDirective;\n}());\nvar NgxSelectOptionSelectedDirective = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} template\n     */\n    function NgxSelectOptionSelectedDirective(template) {\n        this.template = template;\n    }\n    return NgxSelectOptionSelectedDirective;\n}());\nvar NgxSelectOptionNotFoundDirective = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} template\n     */\n    function NgxSelectOptionNotFoundDirective(template) {\n        this.template = template;\n    }\n    return NgxSelectOptionNotFoundDirective;\n}());\nvar _ = lodashNs;\nvar escapeString = escapeStringNs;\nvar NGX_SELECT_OPTIONS = new InjectionToken('NGX_SELECT_OPTIONS');\nvar ENavigation = /*@__PURE__*/ (function () {\n    var ENavigation = {};\n    ENavigation.first = 0;\n    ENavigation.previous = 1;\n    ENavigation.next = 2;\n    ENavigation.last = 3;\n    ENavigation[ENavigation.first] = \"first\";\n    ENavigation[ENavigation.previous] = \"previous\";\n    ENavigation[ENavigation.next] = \"next\";\n    ENavigation[ENavigation.last] = \"last\";\n    return ENavigation;\n}());\n/**\n * @param {?} obj\n * @param {?} propertyName\n * @return {?}\n */\nfunction propertyExists(obj, propertyName) {\n    return propertyName in obj;\n}\nvar NgxSelectComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} iterableDiffers\n     * @param {?} sanitizer\n     * @param {?} cd\n     * @param {?} defaultOptions\n     */\n    function NgxSelectComponent(iterableDiffers, sanitizer, cd, defaultOptions) {\n        var _this = this;\n        this.sanitizer = sanitizer;\n        this.cd = cd;\n        this.optionValueField = 'id';\n        this.optionTextField = 'text';\n        this.optGroupLabelField = 'label';\n        this.optGroupOptionsField = 'options';\n        this.multiple = false;\n        this.allowClear = false;\n        this.placeholder = '';\n        this.noAutoComplete = false;\n        this.disabled = false;\n        this.defaultValue = [];\n        this.autoSelectSingleOption = false;\n        this.autoClearSearch = false;\n        this.noResultsFound = 'No results found';\n        this.size = 'default';\n        this.keyCodeToRemoveSelected = 'Delete';\n        this.keyCodeToOptionsOpen = 'Enter';\n        this.keyCodeToOptionsClose = 'Escape';\n        this.keyCodeToOptionsSelect = 'Enter';\n        this.keyCodeToNavigateFirst = 'ArrowLeft';\n        this.keyCodeToNavigatePrevious = 'ArrowUp';\n        this.keyCodeToNavigateNext = 'ArrowDown';\n        this.keyCodeToNavigateLast = 'ArrowRight';\n        this.typed = new EventEmitter();\n        this.focus = new EventEmitter();\n        this.blur = new EventEmitter();\n        this.open = new EventEmitter();\n        this.close = new EventEmitter();\n        this.select = new EventEmitter();\n        this.remove = new EventEmitter();\n        this.navigated = new EventEmitter();\n        this.optionsOpened = false;\n        this.actualValue = [];\n        this.subjOptions = new BehaviorSubject$1([]);\n        this.subjSearchText = new BehaviorSubject$1('');\n        this.subjOptionsSelected = new BehaviorSubject$1([]);\n        this.subjExternalValue = new BehaviorSubject$1([]);\n        this.subjDefaultValue = new BehaviorSubject$1([]);\n        this.subjRegisterOnChange = new Subject$1();\n        this._focusToInput = false;\n        this.isFocused = false;\n        this.onChange = function (v) { return v; };\n        this.onTouched = function () { return null; };\n        Object.assign(this, defaultOptions);\n        // differs\n        this.itemsDiffer = iterableDiffers.find([]).create(null);\n        this.defaultValueDiffer = iterableDiffers.find([]).create(null);\n        // observers\n        this.typed.subscribe(function (text) { return _this.subjSearchText.next(text); });\n        var cacheExternalValue;\n        var subjActualValue = this.subjExternalValue\n            .map(function (v) { return cacheExternalValue = v === null ? [] : [].concat(v); })\n            .merge(this.subjOptionsSelected.map(function (options) { return options.map(function (o) { return o.value; }); }))\n            .combineLatest(this.subjDefaultValue, function (eVal, dVal) {\n            var newVal = _.isEqual(eVal, dVal) ? [] : eVal;\n            return newVal.length ? newVal : dVal;\n        })\n            .distinctUntilChanged(function (x, y) { return _.isEqual(x, y); })\n            .share();\n        subjActualValue\n            .combineLatest(this.subjRegisterOnChange, function (actualValue) { return actualValue; })\n            .subscribe(function (actualValue) {\n            _this.actualValue = actualValue;\n            if (!_.isEqual(actualValue, cacheExternalValue)) {\n                cacheExternalValue = actualValue;\n                if (_this.multiple) {\n                    _this.onChange(actualValue);\n                }\n                else {\n                    _this.onChange(actualValue.length ? actualValue[0] : null);\n                }\n            }\n        });\n        this.subjOptions\n            .flatMap(function (options) {\n            return Observable$1\n                .from(options)\n                .flatMap(function (option) {\n                return option instanceof NgxSelectOption\n                    ? Observable$1.of(option)\n                    : (option instanceof NgxSelectOptGroup ? Observable$1.from(option.options) : Observable$1.empty());\n            })\n                .toArray();\n        })\n            .combineLatest(subjActualValue, function (optionsFlat, actualValue) {\n            Observable$1.from(optionsFlat)\n                .filter(function (option) { return actualValue.indexOf(option.value) !== -1; })\n                .toArray()\n                .filter(function (options) { return !_.isEqual(options, _this.subjOptionsSelected.value); })\n                .subscribe(function (options) { return _this.subjOptionsSelected.next(options); });\n        })\n            .subscribe();\n        this.subjOptions\n            .combineLatest(this.subjOptionsSelected, this.subjSearchText, function (options, selectedOptions, search) {\n            _this.optionsFiltered = _this.filterOptions(search, options, selectedOptions);\n            _this.cacheOptionsFilteredFlat = null;\n            _this.optionsFilteredFlat()\n                .filter(function (flatOptions) { return _this.autoSelectSingleOption && flatOptions.length === 1 && !selectedOptions.length; })\n                .subscribe(function (flatOptions) { return _this.subjOptionsSelected.next(flatOptions); });\n        })\n            .subscribe();\n    }\n    /**\n     * @param {?=} otherClassNames\n     * @param {?=} useFormControl\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.setFormControlSize = function (otherClassNames, useFormControl) {\n        if (otherClassNames === void 0) {\n            otherClassNames = {};\n        }\n        if (useFormControl === void 0) {\n            useFormControl = true;\n        }\n        var /** @type {?} */ formControlExtraClasses = useFormControl ? {\n            'form-control-sm input-sm': this.size === 'small',\n            'form-control-lg input-lg': this.size === 'large'\n        } : {};\n        return Object.assign(formControlExtraClasses, otherClassNames);\n    };\n    /**\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.setBtnSize = function () {\n        return { 'btn-sm': this.size === 'small', 'btn-lg': this.size === 'large' };\n    };\n    Object.defineProperty(NgxSelectComponent.prototype, \"optionsSelected\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.subjOptionsSelected.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.mainClicked = function (event) {\n        event.clickedSelectComponent = this;\n        if (!this.isFocused) {\n            this.isFocused = true;\n            this.focus.emit();\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.documentClick = function (event) {\n        if (event.clickedSelectComponent !== this) {\n            if (this.optionsOpened) {\n                this.optionsClose();\n                this.cd.detectChanges(); // fix error because of delay between different events\n            }\n            if (this.isFocused) {\n                this.isFocused = false;\n                this.blur.emit();\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.optionsFilteredFlat = function () {\n        var _this = this;\n        if (this.cacheOptionsFilteredFlat) {\n            return Observable$1.of(this.cacheOptionsFilteredFlat);\n        }\n        return Observable$1.from(this.optionsFiltered)\n            .flatMap(function (option) {\n            return option instanceof NgxSelectOption ? Observable$1.of(option) :\n                (option instanceof NgxSelectOptGroup ? Observable$1.from(option.optionsFiltered) : Observable$1.empty());\n        })\n            .filter(function (optionsFilteredFlat) { return !optionsFilteredFlat.disabled; })\n            .toArray()\n            .do(function (optionsFilteredFlat) { return _this.cacheOptionsFilteredFlat = optionsFilteredFlat; });\n    };\n    /**\n     * @param {?} navigation\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.navigateOption = function (navigation) {\n        var _this = this;\n        this.optionsFilteredFlat()\n            .map(function (options) {\n            var /** @type {?} */ navigated = { index: -1, activeOption: null, filteredOptionList: options };\n            var /** @type {?} */ newActiveIdx;\n            switch (navigation) {\n                case ENavigation.first:\n                    navigated.index = 0;\n                    break;\n                case ENavigation.previous:\n                    newActiveIdx = options.indexOf(_this.optionActive) - 1;\n                    navigated.index = newActiveIdx >= 0 ? newActiveIdx : options.length - 1;\n                    break;\n                case ENavigation.next:\n                    newActiveIdx = options.indexOf(_this.optionActive) + 1;\n                    navigated.index = newActiveIdx < options.length ? newActiveIdx : 0;\n                    break;\n                case ENavigation.last:\n                    navigated.index = options.length - 1;\n                    break;\n            }\n            navigated.activeOption = options[navigated.index];\n            return navigated;\n        })\n            .subscribe(function (newNavigated) { return _this.optionActivate(newNavigated); });\n    };\n    /**\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.ngDoCheck = function () {\n        if (this.itemsDiffer.diff(this.items)) {\n            this.subjOptions.next(this.buildOptions(this.items));\n        }\n        var /** @type {?} */ defVal = this.defaultValue ? [].concat(this.defaultValue) : [];\n        if (this.defaultValueDiffer.diff(defVal)) {\n            this.subjDefaultValue.next(defVal);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.ngAfterContentChecked = function () {\n        if (this._focusToInput && this.checkInputVisibility() && this.inputElRef &&\n            this.inputElRef.nativeElement !== document.activeElement) {\n            this._focusToInput = false;\n            this.inputElRef.nativeElement.focus();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.canClearNotMultiple = function () {\n        return this.allowClear && !!this.subjOptionsSelected.value.length &&\n            (!this.subjDefaultValue.value.length || this.subjDefaultValue.value[0] !== this.actualValue[0]);\n    };\n    /**\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.focusToInput = function () {\n        this._focusToInput = true;\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.inputKeyDown = function (event) {\n        var /** @type {?} */ keysForOpenedState = [\n            this.keyCodeToOptionsSelect,\n            this.keyCodeToNavigateFirst,\n            this.keyCodeToNavigatePrevious,\n            this.keyCodeToNavigateNext,\n            this.keyCodeToNavigateLast,\n        ];\n        var /** @type {?} */ keysForClosedState = [this.keyCodeToOptionsOpen, this.keyCodeToRemoveSelected];\n        if (this.optionsOpened && keysForOpenedState.indexOf(event.code) !== -1) {\n            event.preventDefault();\n            event.stopPropagation();\n            switch (event.code) {\n                case this.keyCodeToOptionsSelect:\n                    this.optionSelect(this.optionActive);\n                    this.navigateOption(ENavigation.next);\n                    break;\n                case this.keyCodeToNavigateFirst:\n                    this.navigateOption(ENavigation.first);\n                    break;\n                case this.keyCodeToNavigatePrevious:\n                    this.navigateOption(ENavigation.previous);\n                    break;\n                case this.keyCodeToNavigateLast:\n                    this.navigateOption(ENavigation.last);\n                    break;\n                case this.keyCodeToNavigateNext:\n                    this.navigateOption(ENavigation.next);\n                    break;\n            }\n        }\n        else if (!this.optionsOpened && keysForClosedState.indexOf(event.code) !== -1) {\n            event.preventDefault();\n            event.stopPropagation();\n            switch (event.code) {\n                case this.keyCodeToOptionsOpen:\n                    this.optionsOpen();\n                    break;\n                case this.keyCodeToRemoveSelected:\n                    this.optionRemove(this.subjOptionsSelected.value[this.subjOptionsSelected.value.length - 1], event);\n                    break;\n            }\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.mainKeyUp = function (event) {\n        if (event.code === this.keyCodeToOptionsClose) {\n            this.optionsClose(true);\n        }\n    };\n    /**\n     * @param {?} index\n     * @param {?} option\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.trackByOption = function (index, option) {\n        return option instanceof NgxSelectOption ? option.value :\n            (option instanceof NgxSelectOptGroup ? option.label : option);\n    };\n    /**\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.checkInputVisibility = function () {\n        return (this.multiple === true) || (this.optionsOpened && !this.noAutoComplete);\n    };\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.inputKeyUp = function (value) {\n        if (value === void 0) {\n            value = '';\n        }\n        if (!this.optionsOpened && value) {\n            this.optionsOpen(value);\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.doInputText = function (value) {\n        if (this.optionsOpened) {\n            this.typed.emit(value);\n        }\n    };\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.inputClick = function (value) {\n        if (value === void 0) {\n            value = '';\n        }\n        if (!this.optionsOpened) {\n            this.optionsOpen(value);\n        }\n    };\n    /**\n     * @param {?} html\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.sanitize = function (html) {\n        return html ? this.sanitizer.bypassSecurityTrustHtml(html) : null;\n    };\n    /**\n     * @param {?} option\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.highlightOption = function (option) {\n        if (this.inputElRef) {\n            return option.renderText(this.sanitizer, this.inputElRef.nativeElement.value);\n        }\n        return option.renderText(this.sanitizer, '');\n    };\n    /**\n     * @param {?} option\n     * @param {?=} event\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.optionSelect = function (option, event) {\n        if (event === void 0) {\n            event = null;\n        }\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        if (option && !option.disabled) {\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).concat([option]));\n            this.select.emit(option.value);\n            this.optionsClose(true);\n            this.onTouched();\n        }\n    };\n    /**\n     * @param {?} option\n     * @param {?} event\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.optionRemove = function (option, event) {\n        if (!this.disabled && option) {\n            event.stopPropagation();\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).filter(function (o) { return o !== option; }));\n            this.remove.emit(option.value);\n        }\n    };\n    /**\n     * @param {?} option\n     * @param {?} element\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.isOptionActive = function (option, element) {\n        if (this.optionActive === option) {\n            this.ensureVisibleElement(element);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @param {?} navigated\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.optionActivate = function (navigated) {\n        if (!navigated.activeOption || !navigated.activeOption.disabled) {\n            this.optionActive = navigated.activeOption;\n            this.navigated.emit(navigated);\n        }\n    };\n    /**\n     * @param {?} search\n     * @param {?} options\n     * @param {?} selectedOptions\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.filterOptions = function (search, options, selectedOptions) {\n        var _this = this;\n        var /** @type {?} */ regExp = new RegExp(escapeString(search), 'i'), /** @type {?} */ filterOption = function (option) {\n            if (_this.searchCallback) {\n                return _this.searchCallback(search, option);\n            }\n            return (!search || regExp.test(option.text)) && (!_this.multiple || selectedOptions.indexOf(option) === -1);\n        };\n        return options.filter(function (option) {\n            if (option instanceof NgxSelectOption) {\n                return filterOption(/** @type {?} */ (option));\n            }\n            else if (option instanceof NgxSelectOptGroup) {\n                var /** @type {?} */ subOp = (option);\n                subOp.filter(function (subOption) { return filterOption(subOption); });\n                return subOp.optionsFiltered.length;\n            }\n        });\n    };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.ensureVisibleElement = function (element) {\n        if (this.choiceMenuElRef && this.cacheElementOffsetTop !== element.offsetTop) {\n            this.cacheElementOffsetTop = element.offsetTop;\n            var /** @type {?} */ container = this.choiceMenuElRef.nativeElement;\n            if (this.cacheElementOffsetTop < container.scrollTop) {\n                container.scrollTop = this.cacheElementOffsetTop;\n            }\n            else if (this.cacheElementOffsetTop + element.offsetHeight > container.scrollTop + container.clientHeight) {\n                container.scrollTop = this.cacheElementOffsetTop + element.offsetHeight - container.clientHeight;\n            }\n        }\n    };\n    /**\n     * @param {?=} search\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.optionsOpen = function (search) {\n        var _this = this;\n        if (search === void 0) {\n            search = '';\n        }\n        if (!this.disabled) {\n            this.optionsOpened = true;\n            this.subjSearchText.next(search);\n            if (!this.multiple && this.subjOptionsSelected.value.length) {\n                this.optionsFilteredFlat().subscribe(function (options) {\n                    return _this.optionActivate({\n                        activeOption: _this.subjOptionsSelected.value[0],\n                        filteredOptionList: options,\n                        index: options.indexOf(_this.subjOptionsSelected.value[0])\n                    });\n                });\n            }\n            else {\n                this.navigateOption(ENavigation.first);\n            }\n            this.focusToInput();\n            this.open.emit();\n        }\n    };\n    /**\n     * @param {?=} focusToHost\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.optionsClose = function (focusToHost) {\n        if (focusToHost === void 0) {\n            focusToHost = false;\n        }\n        this.optionsOpened = false;\n        if (focusToHost) {\n            var /** @type {?} */ x = window.scrollX, /** @type {?} */ y = window.scrollY;\n            this.mainElRef.nativeElement.focus();\n            window.scrollTo(x, y);\n        }\n        this.close.emit();\n        if (this.autoClearSearch && this.multiple && this.inputElRef) {\n            this.inputElRef.nativeElement.value = null;\n        }\n    };\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.buildOptions = function (data) {\n        var _this = this;\n        var /** @type {?} */ result = [];\n        if (Array.isArray(data)) {\n            var /** @type {?} */ option_1;\n            data.forEach(function (item) {\n                var /** @type {?} */ isOptGroup = typeof item === 'object' && item !== null &&\n                    propertyExists(item, _this.optGroupLabelField) && propertyExists(item, _this.optGroupOptionsField) &&\n                    Array.isArray(item[_this.optGroupOptionsField]);\n                if (isOptGroup) {\n                    var /** @type {?} */ optGroup_1 = new NgxSelectOptGroup(item[_this.optGroupLabelField]);\n                    item[_this.optGroupOptionsField].forEach(function (subOption) {\n                        if (option_1 = _this.buildOption(subOption, optGroup_1)) {\n                            optGroup_1.options.push(option_1);\n                        }\n                    });\n                    result.push(optGroup_1);\n                }\n                else if (option_1 = _this.buildOption(item, null)) {\n                    result.push(option_1);\n                }\n            });\n        }\n        return result;\n    };\n    /**\n     * @param {?} data\n     * @param {?} parent\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.buildOption = function (data, parent) {\n        var /** @type {?} */ value, /** @type {?} */ text, /** @type {?} */ disabled;\n        if (typeof data === 'string' || typeof data === 'number') {\n            value = text = data;\n            disabled = false;\n        }\n        else if (typeof data === 'object' && data !== null &&\n            (propertyExists(data, this.optionValueField) || propertyExists(data, this.optionTextField))) {\n            value = propertyExists(data, this.optionValueField) ? data[this.optionValueField] : data[this.optionTextField];\n            text = propertyExists(data, this.optionTextField) ? data[this.optionTextField] : data[this.optionValueField];\n            disabled = propertyExists(data, 'disabled') ? data['disabled'] : false;\n        }\n        else {\n            return null;\n        }\n        return new NgxSelectOption(value, text, disabled, data, parent);\n    };\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.writeValue = function (obj) {\n        this.subjExternalValue.next(obj);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n        this.subjRegisterOnChange.next();\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NgxSelectComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    return NgxSelectComponent;\n}());\nvar NgxSelectModule = /*@__PURE__*/ (function () {\n    function NgxSelectModule() {\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    NgxSelectModule.forRoot = function (options) {\n        return {\n            ngModule: NgxSelectModule,\n            providers: [{ provide: NGX_SELECT_OPTIONS, useValue: options }]\n        };\n    };\n    return NgxSelectModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { NgxSelectModule, NGX_SELECT_OPTIONS, NgxSelectComponent, NgxSelectOption, NgxSelectOptGroup, NgxSelectOptionDirective, NgxSelectOptionSelectedDirective, NgxSelectOptionNotFoundDirective };\n//# sourceMappingURL=ngx-select-ex.es5.js.map\n",null]}