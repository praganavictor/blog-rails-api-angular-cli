{"version":3,"sources":["ng://ngx-mask/app/ngx-mask/config.ts","null","ng://ngx-mask/app/ngx-mask/mask-applier.service.ts","ng://ngx-mask/app/ngx-mask/mask.service.ts","ng://ngx-mask/app/ngx-mask/mask.directive.ts","ng://ngx-mask/app/ngx-mask/mask.pipe.ts","ng://ngx-mask/app/ngx-mask/ngx-mask.module.ts"],"names":["config","InjectionToken","NEW_CONFIG","INITIAL_CONFIG","initialConfig","sufix","prefix","clearIfNotMatch","showTemplate","dropSpecialCharacters","specialCharacters","patterns","0","pattern","RegExp","9","optional","A","S","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__generator","thisArg","body","f","y","t","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","this","n","v","step","op","TypeError","call","done","value","pop","length","push","e","MaskApplierService","_config","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","prototype","applyMask","inputValue","maskExpression","position","cb","undefined","cursor","result","multi","slice","inputArray","toString","split","i","inputSymbol","_checkSymbolMask","indexOf","shiftStep","test","add","shift","newPosition","has","maskSymbol","Injectable","Inject","args","document","_elementRef","_renderer","_super","_this","_formElement","nativeElement","__extends","__","constructor","create","tslib_1.__extends","MaskService","isArray","onChange","_removeMask","_removePrefix","applyValueChanges","maskedInput","activeElement","clearIfNotMatchFn","formElementProperty","_a","_b","__read","o","m","r","ar","error","name","setProperty","specialCharactersForRemove","replace","_regExpForRemove","map","item","join","DOCUMENT","ElementRef","Renderer2","_maskService","defineProperty","MaskDirective","_maskValue","_inputValue","onInput","el","caretShift","selectionStart","selectionEnd","_position","inputType","onBlur","onTouch","onFocus","keyCode","preventDefault","a","onPaste","Number","MAX_SAFE_INTEGER","writeValue","__awaiter","_arguments","P","generator","Promise","resolve","reject","fulfilled","rejected","then","apply","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","Directive","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Input","HostListener","MaskPipe","transform","mask","Pipe","pure","NgxMaskModule","forRoot","configValue","ngModule","useValue","useFactory","_configFactory","deps","NgModule","exports","declarations","initConfig","__assign","assign","s","arguments"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n    sufix: string;\n    prefix: string;\n    clearIfNotMatch: boolean;\n    showTemplate: boolean;\n    dropSpecialCharacters: boolean | string[];\n    specialCharacters: string[];\n    patterns: {\n        [character: string]: {\n            pattern: RegExp,\n            optional?: boolean\n        }\n    };\n}\n\nexport type optionsConfig = Partial<IConfig>;\nexport const config: InjectionToken<string> = new InjectionToken('config');\nexport const NEW_CONFIG: InjectionToken<string> = new InjectionToken('NEW_CONFIG');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\n\nexport const initialConfig: IConfig = {\n    sufix: '',\n    prefix: '',\n    clearIfNotMatch: false,\n    showTemplate: false,\n    dropSpecialCharacters: true,\n    specialCharacters: ['/', '(', ')', '.', ':', '-', ' ', '+', ',', '@', '[', ']'],\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true\n        },\n        'A': {\n            pattern: new RegExp('\\[a-zA-Z0-9\\]')\n        },\n        'S': {\n            pattern: new RegExp('\\[a-zA-Z\\]')\n        }\n    }\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\nimport { config, IConfig } from './config';\n\n@Injectable()\nexport class MaskApplierService {\n\n    public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n    public showTemplate: IConfig['showTemplate'];\n    public clearIfNotMatch: IConfig['clearIfNotMatch'];\n    public maskExpression: string = '';\n    public maskSpecialCharacters: IConfig['specialCharacters'];\n    public maskAvailablePatterns: IConfig['patterns'];\n    public prefix: IConfig['prefix'];\n    public sufix: IConfig['sufix'];\n\n\n    private _shift: Set<number>;\n\n    public constructor(\n        @Inject(config) protected _config: IConfig\n    ) {\n        this._shift = new Set();\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.sufix = this._config.sufix;\n\n    }\n\n    public applyMask(\n        inputValue: string,\n        maskExpression: string,\n        position: number = 0,\n        cb: Function = () => {}\n    ): string {\n        if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n            return '';\n        }\n\n        let cursor: number = 0;\n        let result: string = ``;\n        let multi: boolean = false;\n\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n\n        const inputArray: string[] = inputValue.toString()\n            .split('');\n\n        // tslint:disable-next-line\n        for (let i: number = 0, inputSymbol: string = inputArray[0]; i\n        < inputArray.length; i++, inputSymbol = inputArray[i]) {\n            if (cursor === maskExpression.length) {\n                break;\n            }\n\n            if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n                result += inputSymbol;\n                cursor += 2;\n            } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])\n                && maskExpression[cursor + 1]\n                === '*') {\n                result += inputSymbol;\n                multi = true;\n            } else if (\n                maskExpression[cursor + 1] === '*' && multi\n                && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n            ) {\n                result += inputSymbol;\n                cursor += 3;\n                multi = false;\n            } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(\n                inputSymbol,\n                maskExpression[cursor + 2]\n            )) {\n                result += inputSymbol;\n                cursor += 3;\n            } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n                result += inputSymbol;\n                cursor++;\n            } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                result += maskExpression[cursor];\n                cursor++;\n                const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                    ? inputArray.length\n                    : cursor;\n                this._shift.add(shiftStep + this.prefix.length || 0);\n                i--;\n            } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1\n                && this.maskAvailablePatterns[maskExpression[cursor]]\n                && this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n                cursor++;\n                i--;\n            }\n        }\n\n        if (result.length + 1 === maskExpression.length\n            && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n\n        let shift: number = 1;\n        let newPosition: number = position + 1;\n\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n\n        cb(this._shift.has(position) ? shift : 0);\n\n        return this.prefix + result;\n    }\n\n    private _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n        return inputSymbol === maskSymbol\n            || this.maskAvailablePatterns[maskSymbol]\n            && this.maskAvailablePatterns[maskSymbol].pattern\n            && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\n    }\n}\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\nimport { config, IConfig } from './config';\nimport { DOCUMENT } from '@angular/common';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Injectable()\nexport class MaskService extends MaskApplierService {\n\n    public maskExpression: string = '';\n\n\n    private _formElement: HTMLInputElement;\n\n    // tslint:disable-next-line\n    public onChange = (_: any) => { };\n\n    public onTouch = () => { };\n\n    public constructor(\n        // tslint:disable-next-line\n        @Inject(DOCUMENT) private document: any,\n        @Inject(config) protected _config: IConfig,\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n    ) {\n        super(_config);\n\n\n        this._formElement = this._elementRef.nativeElement;\n    }\n\n    public applyMask(\n        inputValue: string, maskExpression: string,\n        position: number = 0, cb: Function = () => { }\n    ): string {\n        const result: string = super.applyMask(inputValue, maskExpression, position, cb);\n\n        Array.isArray(this.dropSpecialCharacters)\n            ? this.onChange(this._removeMask(this._removePrefix(result), this.dropSpecialCharacters))\n            : this.dropSpecialCharacters === true\n            ? this.onChange(this._removeMask(this._removePrefix(result), this.maskSpecialCharacters))\n            : this.onChange(this._removePrefix(result));\n\n\n        return result;\n    }\n\n    public applyValueChanges(position: number = 0, cb: Function = () => { }): void {\n        const maskedInput: string = this.applyMask(this._formElement.value, this.maskExpression, position, cb);\n\n        this._formElement.value = maskedInput;\n\n        if (this._formElement === this.document.activeElement) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n\n    public clearIfNotMatchFn(): void {\n        if (\n            this.clearIfNotMatch === true && this.maskExpression.length\n            !== this._formElement.value.length) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(this._formElement.value, this.maskExpression);\n        }\n    }\n\n    public set formElementProperty([name, value]: [string, string | boolean]) {\n        this._renderer.setProperty(this._formElement, name, value);\n    }\n\n    private _removeMask(value: string, specialCharactersForRemove: string[]): string {\n        return value\n            ? value.replace(this._regExpForRemove(specialCharactersForRemove), '')\n            : value;\n    }\n\n    private _removePrefix(value: string): string {\n        if (!this.prefix) {\n            return value;\n        }\n        return value\n            ? value.replace(this.prefix, '')\n            : value;\n    }\n\n    private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\n        return new RegExp(specialCharactersForRemove\n            .map((item: string) => `\\\\${item}`)\n            .join('|'), 'gi');\n    }\n\n}","import { Directive, forwardRef, HostListener, Inject, Input } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MaskService } from './mask.service';\nimport { IConfig } from './config';\n\n@Directive({\n    selector: '[mask]',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true\n        },\n        MaskService\n    ],\n})\nexport class MaskDirective implements ControlValueAccessor {\n\n    private _maskValue: string;\n    private _inputValue: string;\n    private _position: number | null = null;\n\n    // tslint:disable-next-line\n    public onChange = (_: any) => { };\n\n    public onTouch = () => { };\n\n    public constructor(\n        // tslint:disable-next-line\n        @Inject(DOCUMENT) private document: any,\n        private _maskService: MaskService,\n    ) { }\n\n    @Input('mask')\n    public set maskExpression(value: string) {\n        this._maskValue = value || '';\n        if (!this._maskValue) {\n            return;\n        }\n        this._maskService.maskExpression = this._maskValue;\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)\n        ];\n\n    }\n\n    @Input()\n    public set specialCharacters(value: IConfig['specialCharacters']) {\n        if (!value || !Array.isArray(value) || Array.isArray(value) && !value.length) {\n            return;\n        }\n        this._maskService.maskSpecialCharacters = value;\n    }\n\n    @Input()\n    public set patterns(value: IConfig['patterns']) {\n        if (!value) {\n            return;\n        }\n        this._maskService.maskAvailablePatterns = value;\n    }\n\n    @Input()\n    public set prefix(value: IConfig['prefix']) {\n        if (!value) {\n            return;\n        }\n        this._maskService.prefix = value;\n    }\n\n    @Input()\n    public set sufix(value: IConfig['sufix']) {\n        if (!value) {\n            return;\n        }\n        this._maskService.sufix = value;\n    }\n\n    @Input()\n    public set dropSpecialCharacters(value: IConfig['dropSpecialCharacters']) {\n        this._maskService.dropSpecialCharacters = value;\n    }\n\n    @Input()\n    public set showTemplate(value: IConfig['showTemplate']) {\n        this._maskService.showTemplate = value;\n    }\n\n    @Input()\n    public set clearIfNotMatch(value: IConfig['clearIfNotMatch']) {\n        this._maskService.clearIfNotMatch = value;\n    }\n\n    @HostListener('input', ['$event'])\n    public onInput(e: KeyboardEvent): void {\n        const el: HTMLInputElement = (e.target as HTMLInputElement);\n        this._inputValue = el.value;\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n\n        const position: number = el.selectionStart as number;\n        let caretShift: number = 0;\n\n        this._maskService.applyValueChanges(\n            position,\n            (shift: number) => caretShift = shift\n        );\n\n        // only set the selection if the element is active\n        if (this.document.activeElement !== el) {\n            return;\n        }\n\n        el.selectionStart = el.selectionEnd = this._position !== null\n            ? this._position\n            : position + (\n            // tslint:disable-next-line\n            (e as any).inputType === 'deleteContentBackward'\n                ? 0\n                : caretShift\n        );\n        this._position = null;\n    }\n\n    @HostListener('blur')\n    public onBlur(): void {\n        this._maskService.clearIfNotMatchFn();\n        this.onTouch();\n    }\n\n    @HostListener('click', ['$event'])\n    public onFocus(e: MouseEvent | KeyboardEvent): void {\n\n        if (!this._maskService.prefix) {\n            return;\n        }\n        const el: HTMLInputElement = (e.target as HTMLInputElement);\n\n\n        if ((el.selectionStart === el.selectionEnd)\n            && el.selectionStart\n            > this._maskService.prefix.length\n            // tslint:disable-next-line\n            && (e as any).keyCode\n            !== 38) {\n            return;\n        }\n        e.preventDefault();\n        el.selectionStart = el.selectionEnd = this._maskService.prefix.length;\n\n    }\n\n    @HostListener('keydown', ['$event'])\n    public a(e: KeyboardEvent): void {\n        if (e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 8) {\n            this.onFocus(e);\n        }\n    }\n\n    @HostListener('paste')\n    public onPaste(): void {\n        this._position = Number.MAX_SAFE_INTEGER;\n    }\n\n\n    /** It writes the value in the input */\n    public async writeValue(inputValue: string): Promise<void> {\n        if (inputValue === undefined) {\n            return;\n        }\n\n        inputValue && this._maskService.maskExpression\n            ? this._maskService.formElementProperty = [\n                'value',\n                this._maskService.applyMask(inputValue, this._maskService.maskExpression)\n            ]\n            : this._maskService.formElementProperty = ['value', inputValue];\n\n        this._inputValue = inputValue;\n    }\n\n    // tslint:disable-next-line\n    public registerOnChange(fn: any): void {\n        this.onChange = fn;\n        this._maskService.onChange = this.onChange;\n    }\n\n    // tslint:disable-next-line\n    public registerOnTouched(fn: any): void {\n        this.onTouch = fn;\n    }\n\n    /** It disables the input element */\n    public setDisabledState(isDisabled: boolean): void {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n\n\n}","import { Pipe, PipeTransform } from '@angular/core';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Pipe({\n  name: 'mask',\n  pure: true\n})\nexport class MaskPipe implements PipeTransform {\n\n  public constructor(private _maskService: MaskApplierService) { }\n\n  public transform(value: string|number, mask: string): string {\n    if (!value) {\n      return '';\n    }\n    return this._maskService.applyMask(`${value}`, mask);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nimport { MaskDirective } from './mask.directive';\nimport { MaskPipe } from './mask.pipe';\n\n@NgModule({\n  providers: [MaskApplierService],\n  exports: [MaskDirective, MaskPipe],\n  declarations: [MaskDirective, MaskPipe]\n})\nexport class NgxMaskModule {\n\n  public static forRoot(configValue?: optionsConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [\n        {\n          provide: NEW_CONFIG,\n          useValue: configValue\n        },\n        {\n          provide: INITIAL_CONFIG,\n          useValue: initialConfig\n        },\n        {\n          provide: config,\n          useFactory: _configFactory,\n          deps: [INITIAL_CONFIG, NEW_CONFIG]\n        },\n      ]\n    };\n  }\n}\n\n/**\n * @internal\n */\nexport function _configFactory\n(initConfig: optionsConfig, configValue: optionsConfig | (() => optionsConfig)): Function | optionsConfig {\n  return (typeof configValue === 'function') ? configValue() : { ...initConfig, ...configValue };\n}\n"]}